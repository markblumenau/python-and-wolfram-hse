(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    306174,       6421]
NotebookOptionsPosition[    297607,       6267]
NotebookOutlinePosition[    298080,       6285]
CellTagsIndexPosition[    298037,       6282]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9526833473390746`*^9, 
  3.9526833491601343`*^9}},ExpressionUUID->"c31dca86-097d-4c9c-bb81-\
dfbd71a62bc8"],

Cell["\:0412\:043e\:043b\:044c\:0444\:0440\:0430\:043c \:041c\:0430\:0442\
\:0435\:043c\:0430\:0442\:0438\:043a\:0430", "Text",
 CellChangeTimes->{{3.9526833830781612`*^9, 
  3.9526833894218707`*^9}},ExpressionUUID->"2e14ffb6-7c79-4a23-af57-\
797916c1a29d"],

Cell[BoxData[
 RowBox[{"(*", "smthng", "*)"}]], "Input",
 CellChangeTimes->{{3.952683404946647*^9, 3.952683425028582*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"2b5172cb-2540-4290-b768-69f0a8cf49fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x1", "=", "5"}]], "Input",
 CellChangeTimes->{{3.9526834385998974`*^9, 3.9526834435579424`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"8415ba35-acd3-4b9c-b935-9a35fac9d4d1"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.95268344448864*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"3ed5d418-444a-40a0-af53-92c7d30891be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "x"}]], "Input",
 CellChangeTimes->{{3.952683473166834*^9, 3.9526834735901594`*^9}, {
  3.952683511806981*^9, 3.952683538383219*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"c49c6288-ac26-469d-9441-cdd1c398dc21"],

Cell[BoxData[
 SuperscriptBox["x", "3"]], "Output",
 CellChangeTimes->{
  3.952683474488462*^9, {3.9526835324011087`*^9, 3.9526835387607603`*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"b0dc8806-ce19-4958-8428-3e712408fd29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 OverscriptBox["x", "~"]], "Input",
 CellChangeTimes->{{3.952683556232669*^9, 3.952683567438179*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"647595b4-b55c-469c-b6dd-3a265f70f01a"],

Cell[BoxData[
 OverscriptBox["x", "~"]], "Output",
 CellChangeTimes->{3.952683569162917*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"6ad38b77-e1b4-4278-9f54-5acdd0ab7e5c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.952683587305067*^9, 
  3.9526836508854413`*^9}},ExpressionUUID->"052c2331-a119-46ce-b786-\
a1162e26beb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "2"], "-", "1"}], ")"}], 
   RowBox[{"x", "-", "1"}]], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.9526837582403097`*^9, 3.952683834342506*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"dbcece2a-cf09-40ae-8e5d-478a528851fc"],

Cell[BoxData[
 RowBox[{"1", "+", "x"}]], "Output",
 CellChangeTimes->{{3.9526837877180505`*^9, 3.9526838005128427`*^9}, {
  3.952683831535884*^9, 3.952683834623152*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"975a6ec0-d2e2-4e42-ad4d-29318c84d6d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"Cos", "[", 
      RowBox[{"\[Pi]", " ", "x"}], "]"}]], ",", "x"}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.9526838984826174`*^9, 3.9526839453754625`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"c3c8554b-0637-4001-b20b-852d5ae7a905"],

Cell[BoxData[
 RowBox[{"\[Pi]", " ", 
  RowBox[{"Sec", "[", 
   RowBox[{"\[Pi]", " ", "x"}], "]"}], " ", 
  RowBox[{"Tan", "[", 
   RowBox[{"\[Pi]", " ", "x"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.9526839329524403`*^9, 3.952683945651577*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"544f0b96-6105-4c00-8a42-7709e88e5a5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"(", 
   RowBox[{"\[Pi]", " ", 
    RowBox[{"Sec", "[", 
     RowBox[{"\[Pi]", " ", "x"}], "]"}], " ", 
    RowBox[{"Tan", "[", 
     RowBox[{"\[Pi]", " ", "x"}], "]"}]}], ")"}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[15]:=",ExpressionUUID->"8ac63aad-283c-4fca-93df-85fb6c47c3e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[Pi]", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sec", "[", 
     RowBox[{"\[Pi]", " ", "x"}], "]"}], "3"]}], "+", 
  RowBox[{
   SuperscriptBox["\[Pi]", "2"], " ", 
   RowBox[{"Sec", "[", 
    RowBox[{"\[Pi]", " ", "x"}], "]"}], " ", 
   SuperscriptBox[
    RowBox[{"Tan", "[", 
     RowBox[{"\[Pi]", " ", "x"}], "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{3.952683946853835*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"8756f024-a842-4641-b41a-f7b03a5f888c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"\[Pi]", " ", "x"}], "]"}], "+", "y"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "5"}], "}"}]}], "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.952683979063332*^9, 3.952684048174217*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"a08e8b35-bda2-49f1-8830-40d5ace86f1c"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"8", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"y", "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Pi]", " ", "x"}], "]"}]}], ")"}], "6"]}]], 
  RowBox[{
   SuperscriptBox["\[Pi]", "5"], " ", 
   RowBox[{"(", 
    RowBox[{"723", "+", 
     RowBox[{"8", " ", 
      SuperscriptBox["y", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "27"}], "+", 
        SuperscriptBox["y", "2"]}], ")"}]}], "+", 
     RowBox[{"4", " ", "y", " ", 
      RowBox[{"(", 
       RowBox[{"201", "-", 
        RowBox[{"52", " ", 
         SuperscriptBox["y", "2"]}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Pi]", " ", "x"}], "]"}]}], "+", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "59"}], "+", 
        RowBox[{"66", " ", 
         SuperscriptBox["y", "2"]}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}], "-", 
     RowBox[{"52", " ", "y", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"3", " ", "\[Pi]", " ", "x"}], "]"}]}], "+", 
     RowBox[{"Cos", "[", 
      RowBox[{"4", " ", "\[Pi]", " ", "x"}], "]"}]}], ")"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"\[Pi]", " ", "x"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.9526839944730835`*^9, 3.9526840506509914`*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"472fbcb1-4b24-4437-9024-02e0247a238b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"\[Pi]", " ", "x"}], "]"}], "+", "y"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "5"}], "}"}]}], "]"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.952684026240251*^9, 3.9526840599828873`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"bcbfc7e5-11be-461a-b160-c08280fd7001"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"8", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"y", "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"\[Pi]", " ", "x"}], "]"}]}], ")"}], "6"]}]], 
  RowBox[{
   SuperscriptBox["\[Pi]", "5"], " ", 
   RowBox[{"(", 
    RowBox[{"723", "-", 
     RowBox[{"216", " ", 
      SuperscriptBox["y", "2"]}], "+", 
     RowBox[{"8", " ", 
      SuperscriptBox["y", "4"]}], "-", 
     RowBox[{"4", " ", "y", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "201"}], "+", 
        RowBox[{"52", " ", 
         SuperscriptBox["y", "2"]}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Pi]", " ", "x"}], "]"}]}], "+", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "59"}], "+", 
        RowBox[{"66", " ", 
         SuperscriptBox["y", "2"]}]}], ")"}], " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "x"}], "]"}]}], "-", 
     RowBox[{"52", " ", "y", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"3", " ", "\[Pi]", " ", "x"}], "]"}]}], "+", 
     RowBox[{"Cos", "[", 
      RowBox[{"4", " ", "\[Pi]", " ", "x"}], "]"}]}], ")"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"\[Pi]", " ", "x"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.9526840603753357`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"66400c8e-703f-4c97-9c0b-57ce047254bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9526840988488717`*^9, 3.9526841391510897`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c85297c2-9d7e-424b-81dd-2ec33eb76c7d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"x", "-", 
   FractionBox[
    SuperscriptBox["x", "2"], "2"], "+", 
   FractionBox[
    SuperscriptBox["x", "3"], "3"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "4"],
    SeriesData[$CellContext`x, 0, {}, 1, 4, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {1, 
    Rational[-1, 2], 
    Rational[1, 3]}, 1, 4, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.9526841398619156`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"78df1b9c-2ab8-4930-bbcf-198164e4f598"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.952684155656938*^9, 3.9526841716947837`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"391b65d0-882a-4dee-8b77-17cf0567ef89"],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["x", "3"], "3"]], "Output",
 CellChangeTimes->{3.9526841733902893`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"55a4e052-ef82-4511-ad14-60967829673d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     SuperscriptBox["x", "2"]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Infinity"}], ",", " ", "Infinity"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.952684198183462*^9, 3.9526842147144346`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"95ed26da-bf76-41d9-9796-f848f4f34b67"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SqrtBox["\[Pi]"], "//", "N"}]], "Input",
 CellChangeTimes->{{3.952684289942113*^9, 3.9526842904142675`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"683f76a7-f536-4bb0-ae64-77b1d9b54409"],

Cell[BoxData["1.7724538509055159`"], "Output",
 CellChangeTimes->{3.9526842909353256`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"d515c87f-426f-4527-a55e-083401f77221"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{"-", 
     SuperscriptBox["x", "2"]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Infinity"}], ",", " ", "Infinity"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9526842954577312`*^9, 3.9526843257504597`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"0f5f1e53-9e02-4035-ae6b-9a80ef9408da"],

Cell[BoxData["1.7724538504129486`"], "Output",
 CellChangeTimes->{3.9526843287962403`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"1a9f4f9a-0def-4022-ac6b-158829564d12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSum", "[", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox["n", "2"]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9526842253373804`*^9, 3.9526842776777587`*^9}, {
  3.9526843551580186`*^9, 3.9526843726087494`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"ced5d854-93ba-4c94-8269-f4a00dc6eebb"],

Cell[BoxData["1.6449340667600105`"], "Output",
 CellChangeTimes->{3.9526843730291557`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"82899d0f-427b-44c4-aec4-0920a3e4d405"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox["n", "2"]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.952684379286713*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"3325215b-b8c4-4c6a-84ef-6e5985237b71"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["\[Pi]", "2"], "6"], "//", "N"}]], "Input",
 CellChangeTimes->{{3.9526843863822064`*^9, 3.952684386797986*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"8e11d354-f0c3-411a-b64a-20fbe8d76735"],

Cell[BoxData["1.6449340668482262`"], "Output",
 CellChangeTimes->{3.9526843871540885`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"e3043cd9-c94a-4022-857b-4741a597ef6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SqrtBox[
   SuperscriptBox["x", "2"]], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.952684413697093*^9, 3.9526844562011003`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"9b9c9ac7-d93b-401e-8ec2-3d9c9bd2652d"],

Cell[BoxData[
 SqrtBox[
  SuperscriptBox["x", "2"]]], "Output",
 CellChangeTimes->{{3.952684446287114*^9, 3.9526844564724703`*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"d86c249a-c407-4d45-9b38-4d7ccc0973da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"x", ">", "0"}], ",", 
   RowBox[{
    SqrtBox[
     SuperscriptBox["x", "2"]], "//", "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9526844878726435`*^9, 3.9526845083514423`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"918eba12-4f6e-4d8f-aa2e-3f18d80ba707"],

Cell[BoxData["x"], "Output",
 CellChangeTimes->{3.952684508770277*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"f7cca73e-5c81-4801-8672-e9b2e6efc786"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Element]", 
      TemplateBox[{},
       "Reals"]}], ",", " ", 
     RowBox[{"y", ">", "0"}]}], "}"}], ",", 
   RowBox[{
    SqrtBox[
     RowBox[{
      SuperscriptBox["x", "2"], 
      SuperscriptBox["y", "2"]}]], "//", "FullSimplify"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.952684537894811*^9, 
  3.952684610042652*^9}},ExpressionUUID->"9dfebced-8975-47cf-97f1-\
24505b9ca324"],

Cell[BoxData[
 RowBox[{"y", " ", 
  RowBox[{"Abs", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.952684568812473*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"aaca92d6-55dd-4cad-a7d8-078107d15868"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"(", 
   RowBox[{"y", " ", 
    RowBox[{"Abs", "[", "x", "]"}]}], ")"}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[36]:=",ExpressionUUID->"17fcf3e8-1193-4cbd-8bbf-dfaea97d61fa"],

Cell[BoxData[
 RowBox[{"y", " ", 
  RowBox[{
   SuperscriptBox["Abs", "\[Prime]",
    MultilineFunction->None], "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.9526845707983003`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"3aaff1f7-47fc-460b-b635-e2eae95297d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$Assumptions", " ", "=", " ", 
  RowBox[{"x", "\[Element]", 
   TemplateBox[{},
    "Reals"]}]}]], "Input",
 CellChangeTimes->{{3.952684666354009*^9, 3.9526846851763487`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"1df5b869-58af-48b4-9a50-16b3e5ea8622"],

Cell[BoxData[
 RowBox[{"x", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.952684685555211*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"2052198b-975e-423d-82de-4c2a46cf2bd3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SqrtBox[
   SuperscriptBox["x", "2"]], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{3.952684697238654*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"04832359-e0c0-4316-9dd6-50712208051f"],

Cell[BoxData[
 RowBox[{"Abs", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.9526846976804237`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"68529439-34d2-40b2-b50d-033a7e1c3b8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$Assumptions", " ", "=", " ", "True"}]], "Input",
 CellChangeTimes->{{3.9526847173583865`*^9, 3.952684717855336*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"d7bbf328-65cc-493d-a089-1f9f2c82ff73"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9526847237643833`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"88912fbd-36fc-4372-950f-9a0d1aa6e8fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["y", "\[Prime]",
        MultilineFunction->None], "[", "x", "]"}], "==", 
      RowBox[{"y", "[", "x", "]"}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "2"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.952684743016565*^9, 
  3.9526849908304415`*^9}},ExpressionUUID->"d1bf295d-5abe-4350-859a-\
cf417e057771"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{"2", " ", 
     SuperscriptBox["\[ExponentialE]", "x"]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.9526849098663826`*^9, 3.9526849732930856`*^9}},
 CellLabel->"Out[51]=",ExpressionUUID->"3f79e66a-8055-4de9-bd2a-ae8c2458d92b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["y", "\[Prime]",
        MultilineFunction->None], "[", "x", "]"}], "==", 
      RowBox[{"y", "[", "x", "]"}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "2"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",ExpressionUUID->\
"57cd77f9-c9a1-4047-aab2-588b3f7e1c4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"x", "'"}], "[", "t", "]"}], "==", 
      RowBox[{"y", "[", "t", "]"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "t", "]"}], "==", 
      RowBox[{"-", 
       RowBox[{"x", "[", "t", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"x", "[", "0", "]"}], "==", "0"}], ",", " ", 
     RowBox[{
      RowBox[{"y", "[", 
       FractionBox["\[Pi]", "3"], "]"}], "==", 
      FractionBox[
       RowBox[{"Sqrt", "[", "3", "]"}], "\[Alpha]"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], ",", 
     RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.9526851324880056`*^9, 3.9526851464158506`*^9}, {
  3.952685223663519*^9, 3.95268525782303*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"d8e68be2-2843-4c9c-bd78-020e563efd2c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
     FractionBox[
      RowBox[{"2", " ", 
       SqrtBox["3"], " ", 
       RowBox[{"Sin", "[", "t", "]"}]}], "\[Alpha]"]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     FractionBox[
      RowBox[{"2", " ", 
       SqrtBox["3"], " ", 
       RowBox[{"Cos", "[", "t", "]"}]}], "\[Alpha]"]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.952685122310485*^9, 3.9526851626607623`*^9}, 
   3.9526852168866944`*^9, 3.9526852583001766`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"e6c9734c-f2b2-48b3-b4bc-706e6e798985"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.9526851560165386`*^9, 3.9526851584145727`*^9}, 
   3.952685253919222*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"d84393fb-9896-4e28-9e40-f4f90858433c"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Size of Moscow", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Output", 
        "Quantity[2562.8, \"Kilometers\"^2]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Moscow\", \"Moscow\", \
\"Russia\"}][EntityProperty[\"City\", \"Area\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Moscow\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CityData, {"Moscow", "Moscow", "Russia"}}]], 
                    Identity], 
                    TagBox[
                    TagBox["\"Tsentralniy\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {
                    "Tsentralniy", "Moscow", "Russia"}}]], Identity]}, 
                    "RowWithSeparators"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"area\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Data", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["moutput", {}, {"Quantity[2562.8, \"Kilometers\"^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["2562.8", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2562.8", "SRString" -> "2562.8"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"km\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"square kilometers\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "Result__Show non-metric"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "UnitConversion", "numsubpods" -> "5", 
     "position" -> "300", "scanner" -> "Unit", "title" -> 
     "Unit conversions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"Quantity[2.5628*^9, \"Meters\"^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox[
                    RowBox[{"2.563", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "9"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.563", "\[Times]", 
                    SuperscriptBox["10", "9"]}], "SRString" -> 
                    "2.563 times 10 to the 9"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"m\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"square meters\"", "\[NoBreak]", 
                   "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"Quantity[25.628, \"Megaares\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["25.628", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "25.628", "SRString" -> "25.628"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Ma\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"megaares\"", "\[NoBreak]", 
                   "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"Quantity[0.025628, \"Gigaares\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["0.025628", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.025628", "SRString" -> "0.025628"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"Ga\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"gigaares\"", "\[NoBreak]", 
                   "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"Quantity[989.51, \"Miles\"^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox["989.51", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "989.51", "SRString" -> "989.51"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"mi\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"square miles\"", "\[NoBreak]", 
                   "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"Quantity[2.7586*^10, \"Feet\"^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              RowBox[{
                TagBox[
                 TagBox[
                  RowBox[{
                    TagBox[
                    RowBox[{"2.759", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "10"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"2.759", "\[Times]", 
                    SuperscriptBox["10", "10"]}], "SRString" -> 
                    "2.759 times 10 to the 10"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"ft\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"square feet\"", "\[NoBreak]", 
                   "\")\""}], {
                 FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "5"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "UnitConversion__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "ComparisonAsArea", "numsubpods" -> 
     "3", "position" -> "400", "scanner" -> "Unit", "title" -> 
     "Comparisons as area"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               StyleBox["\"( \"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               TemplateBox[{"\"\"", "0", "\".\"", "1", "2"}, "RowDefault"], 
               StyleBox[
                
                TemplateBox[{
                 "\" \[TildeTilde] \"", "\"1\"", "\"/\"", "8", "\" ) \""}, 
                 "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               StyleBox[
                StyleBox["\"\[Times]\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], FontSize -> 10.219999999999999`, 
                StripOnInput -> False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"total area of Wales\"", {
                FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"\[MediumSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["8022.82", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8022.82", "SRString" -> "8022.82"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"mi\"", "2"], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"\[MediumSpace]\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                  FontSize -> 10, FontFamily -> "Roboto", 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               TemplateBox[{"\"\"", "0", "\".\"", "8", "2"}, "RowDefault"], 
               "\" \"", 
               StyleBox[
                StyleBox["\"\[Times]\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], FontSize -> 10.219999999999999`, 
                StripOnInput -> False], "\"\[MediumSpace]\"", 
               StyleBox[
               "\"total area of Rhode Island\"", {
                FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"\[MediumSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1212", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1212", "SRString" -> "1212"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"mi\"", "2"], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"\[MediumSpace]\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                  FontSize -> 10, FontFamily -> "Roboto", 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{"\" \[TildeTilde] \"", 
               StyleBox[
               "\"area of forest flattened by the asteroid explosion over \
Tunguska in 1908\"", {
                FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}], 
               TemplateBox[{"\" \"", 
                 StyleBox[
                  RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"\[MediumSpace]\[TildeTilde]\[ThinSpace]\"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2000", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2000", "SRString" -> "2000"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\"km\"", "2"]}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"\[MediumSpace]\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                  FontSize -> 10, FontFamily -> "Roboto", 
                   GrayLevel[0.5], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "CorrespondingQuantity", "numsubpods" -> 
     "3", "position" -> "500", "scanner" -> "Unit", "title" -> 
     "Corresponding quantities"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Radius ", 
                    Cell[
                    BoxData[
                    FormBox["r", TraditionalForm]]], " of a circle from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{"A", "\[LongEqual]", 
                    RowBox[{"\[Pi]", "\[InvisibleSpace]", 
                    SuperscriptBox["r", "2"]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}, 
                    "RowDefault"], TraditionalForm], TraditionalForm]]], 
                    ":"}]], 
                 TextCell[
                  Row[{"Radius ", 
                    $CellContext`CalculateSymbol["r"], " of a circle from ", 
                    $CellContext`InlineForm["A \[LongEqual] Pi r^2"], 
                    ":"}]]]}, {
                TagBox[
                 GridBox[{{"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["29", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "29", "SRString" -> "29"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["18", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "18", "SRString" -> "18"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"miles\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{1}}, "Rows" -> {{Automatic}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Radius ", 
                    Cell[
                    BoxData[
                    FormBox["r", TraditionalForm]]], " of a sphere from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{"A", "\[LongEqual]", 
                    RowBox[{
                    TagBox["4", HoldForm], "\[InvisibleSpace]", "\[Pi]", 
                    "\[InvisibleSpace]", 
                    SuperscriptBox["r", "2"]}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}, 
                    "RowDefault"], TraditionalForm], TraditionalForm]]], 
                    ":"}]], 
                 TextCell[
                  Row[{"Radius ", 
                    $CellContext`CalculateSymbol["r"], " of a sphere from ", 
                    $CellContext`InlineForm["A \[LongEqual] 4Pi r^2"], 
                    ":"}]]]}, {
                TagBox[
                 GridBox[{{"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["14", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "14", "SRString" -> "14"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["8.9", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "8.9", "SRString" -> "8.9"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"miles\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{1}}, "Rows" -> {{Automatic}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                InterpretationBox[
                 Cell[
                  TextData[{"Edge length ", 
                    Cell[
                    BoxData[
                    FormBox["a", TraditionalForm]]], " of a square from ", 
                    Cell[
                    BoxData[
                    FormBox[
                    FormBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{"A", "\[LongEqual]", 
                    SuperscriptBox["a", "2"]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}, 
                    "RowDefault"], TraditionalForm], TraditionalForm]]], 
                    ":"}]], 
                 TextCell[
                  Row[{"Edge length ", 
                    $CellContext`CalculateSymbol["a"], " of a square from ", 
                    $CellContext`InlineForm["A \[LongEqual] a^2"], ":"}]]]}, {
                TagBox[
                 GridBox[{{"", 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["51", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "51", "SRString" -> "51"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["31", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "31", "SRString" -> "31"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"miles\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{1}}, "Rows" -> {{Automatic}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False, False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "3"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Size", "template" -> 
        "Assuming \"Size\" is referring to cities${separator}Use as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"Size\"} -> {\"CityProperty\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "CityProperty", "desc" -> " referring to cities", "input" -> 
          "{\"C\", \"Size\"} -> {\"CityProperty\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "AdministrativeDivisionProperty", "desc" -> 
          " referring to administrative divisions", "input" -> 
          "{\"C\", \"Size\"} -> {\"AdministrativeDivisionProperty\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "Size", "template" -> 
        "Assuming area${separator}Use ${desc} instead", "count" -> "2", 
        "pulldown" -> "false", "default" -> 
        "{\"DPClash\", \"CityP\", \"Size\"} -> {\"Area\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Area", "desc" -> "area", "input" -> 
          "{\"DPClash\", \"CityP\", \"Size\"} -> {\"Area\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Population", "desc" -> "city population", "input" -> 
          "{\"DPClash\", \"CityP\", \"Size\"} -> {\"Population\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "SubCategory", "word" -> "Moscow", "template" -> 
        "Assuming Moscow (Russia)${separator}Use ${desc} or ${pulldown} \
instead", "count" -> "9", "pulldown" -> "true", "pulldownlabel" -> "more >>", 
        "pulldownlength" -> "7", "default" -> 
        "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Moscow\", \
\"Russia\"}, \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "{Moscow, Moscow, Russia}", "desc" -> "Moscow (Russia)", 
          "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Moscow\", \
\"Russia\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Idaho, UnitedStates}", "desc" -> 
          "Moscow (Idaho, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Idaho\", \
\"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Pennsylvania, UnitedStates}", "desc" -> 
          "Moscow (Pennsylvania, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \
\"Pennsylvania\", \"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Wisconsin, UnitedStates}", "desc" -> 
          "Moscow (Wisconsin, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \
\"Wisconsin\", \"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Maine, UnitedStates}", "desc" -> 
          "Moscow (Maine, USA)", "input" -> 
          
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Maine\", \
\"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Tennessee, UnitedStates}", "desc" -> 
          "Moscow (Tennessee, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \
\"Tennessee\", \"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Kansas, UnitedStates}", "desc" -> 
          "Moscow (Kansas, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Kansas\", \
\"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Maryland, UnitedStates}", "desc" -> 
          "Moscow (Maryland, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \
\"Maryland\", \"UnitedStates\"}}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "{Moscow, Ohio, UnitedStates}", "desc" -> 
          "Moscow (Ohio, USA)", "input" -> 
          "{\"DPClash\", \"CityE\", \"Moscow\"} -> {{\"Moscow\", \"Ohio\", \
\"UnitedStates\"}}"}, {}]}]}], 
    XMLElement["userinfoused", {"count" -> "1"}, {"\n  ", 
      XMLElement["userinfo", {"name" -> "Country"}, {}], "\n "}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
CityDataSourceInformationNotes.html", "text" -> "City data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "City", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.876", "parsetiming" -> "0.324", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP124524c690aiibc29fc60000613bae3151dihega", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa124624c690aiibc29fc600002ah07337g6g456fa3629183885576317489", "version" -> 
    "2.6", "inputstring" -> "Size of Moscow"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2025, 4, 3, 19, 10, 17.5258417`8.996253827455602}, "Line" -> 
    66, "SessionID" -> 17802004585480784715}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", "Quantity[2562.8, \"Kilometers\"^2]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "Size of Moscow"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{728., {2302., 25.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[66]:=",ExpressionUUID->"77ea0f9a-7848-4e5c-9859-0f9664876da9"],

Cell[BoxData[
 TemplateBox[{"2562.8`", 
   RowBox[{
     SuperscriptBox["\"km\"", "2"]}], "kilometers squared", 
   SuperscriptBox["\"Kilometers\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.9526853645034523`*^9, 3.9526854175920086`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"38a74853-cd0d-455d-b418-d3d5bd91c97b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"x", "'"}], "[", "t", "]"}], "==", 
      RowBox[{"y", "[", "t", "]"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "t", "]"}], "==", 
      RowBox[{"-", 
       RowBox[{"x", "[", "t", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"x", "[", "0", "]"}], "==", "0"}], ",", " ", 
     RowBox[{
      RowBox[{"y", "[", 
       FractionBox["\[Pi]", "3"], "]"}], "==", 
      FractionBox[
       RowBox[{"Sqrt", "[", "3", "]"}], "\[Alpha]"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], ",", 
     RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", "t"}], "]"}]],
 CellChangeTimes->{{3.9526851324880056`*^9, 3.9526851464158506`*^9}, {
  3.952685223663519*^9, 
  3.95268525782303*^9}},ExpressionUUID->"951be820-4c42-4752-8898-\
ea33b23e5a09"]], "WolframAlphaLong",
 CellChangeTimes->{{3.9526854558053904`*^9, 3.9526854563246584`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"4da23b98-90bc-4812-a2d0-8d1fa742e466"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "DSolve[{x'[t] == y[t], y'[t] == -x[t], x[0] == 0, y[\[Pi]/3] == Sqrt[3]/\
\[Alpha]}, {x[t],\n   y[t]}, t]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["tips", {"count" -> "2"}, {"\n  ", 
      XMLElement[
      "tip", {"text" -> "Avoid concatenation in math expressions"}, {}], 
      "\n  ", 
      XMLElement[
      "tip", {"text" -> 
        "Use r*x rather than rx, and q*x^2 rather than qx2"}, {}], "\n "}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "5.132", "parsetiming" -> "0.962", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP122612878f9aaa8h53c300004e84a659ca3419fd", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> "", 
    "version" -> "2.6", "inputstring" -> 
    "DSolve[{x'[t] == y[t], y'[t] == -x[t], x[0] == 0, y[\[Pi]/3] == Sqrt[3]/\
\[Alpha]}, {x[t],    y[t]}, t]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2025, 4, 3, 19, 11, 3.2823295`8.268757156978081}, "Line" -> 67,
     "SessionID" -> 17802004585480784715}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "DSolve[{x'[t] == y[t], y'[t] == -x[t], x[0] == 0, y[\[Pi]/3] == Sqrt[3]/\
\[Alpha]}, {x[t],\n   y[t]}, t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1206.8000000000002`, {56.96083996989764, 63.83916003010236}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9526854632886324`*^9},ExpressionUUID->"bc3ffc75-2e50-433c-96d8-\
15e8d4a8609e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["y", "\[Prime]",
        MultilineFunction->None], "[", "x", "]"}], "==", 
      RowBox[{"y", "[", "x", "]"}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "2"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], 
  "]"}]], "Input",ExpressionUUID->"3be5d684-72f1-4dca-80ab-ab846e883fe8"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.9526855141974893`*^9, 3.9526855145624957`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"8802f401-3a75-4d58-8dd5-5b0e8e5fa799"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "DSolve[{Derivative[1][y][x] == y[x], y[0] == 2}, y[x], x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"y'[x] == y[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                 "(", "x", ")"}], "\[LongEqual]", 
               TagBox[
                RowBox[{"y", "(", "x", ")"}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Separable equation", "scanner" -> "ODE", "id" -> 
     "SeparableEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                FractionBox[
                 RowBox[{
                   SuperscriptBox["y", "\[Prime]", MultilineFunction -> None],
                    "(", "x", ")"}], 
                 RowBox[{"y", "(", "x", ")"}]], "\[LongEqual]", "1"}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"first\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"DSolve[{y'[x] == y[x]}, y[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                SubscriptBox["c", "1"], " ", 
                SuperscriptBox["\[ExponentialE]", "x"]}]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Solution__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Slope field", "scanner" -> "ODE", "id" -> "SlopeField",
      "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "VectorPlot[{1, y}, {x, -10, 10}, {y, -10, 10}, VectorStyle -> \
\"Segment\"]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}}, {{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.368417, 0.506779, 0.709798]], {
                 
                 LineBox[{{-10.060220927122698`, -9.548943422453192}, \
{-9.9674890328773, -10.477487877146809`}}], 
                 
                 LineBox[{{-10.065937779832348`, -8.438806983816963}, \
{-9.961772180167653, -9.366138389733477}}], 
                 
                 LineBox[{{-10.073249481981788`, -7.32894381723158}, \
{-9.954460478018209, -8.254515630269307}}], 
                 
                 LineBox[{{-10.08292282627196, -6.219545394190866}, \
{-9.94478713372804, -7.142428127260467}}], 
                 
                 LineBox[{{-10.096300187289104`, -5.111003893148586}, \
{-9.931409772710895, -6.029483702253191}}], 
                 
                 LineBox[{{-10.115946143091191`, -4.0042252076578855`}, \
{-9.911763816908808, -4.914776461694338}}], 
                 
                 LineBox[{{-10.147359378760726`, -2.9016839654012734`}, \
{-9.880350581239274, -3.795831777901395}}], 
                 
                 LineBox[{{-10.204198051025072`, -1.8120242779186795`}, \
{-9.823511908974925, -2.6640055393344344`}}], 
                 
                 LineBox[{{-10.323485541461677`, -0.7782341001651025}, \
{-9.704224418538322, -1.4763097910384557`}}], 
                 
                 LineBox[{{-10.480372977049244`, -0.00881791473191696}, \
{-9.547336982950753, -0.024240050422086316`}}], 
                 
                 LineBox[{{-10.328617217665606`, 
                  0.7497967394770438}, {-9.699092742334393, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-10.206567939563941`, 
                  1.7800331651848964`}, {-9.821142020436058, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-10.148579959628082`, 
                  2.8689923041416465`}, {-9.87913000037192, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-10.116671696418951`, 
                  3.9713305482617667`}, {-9.91103826358105, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-10.096776897630981`, 
                  5.078031765032994}, {-9.930933062369018, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-10.08325869702355, 
                  6.186537826651089}, {-9.944451262976449, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-10.07349842202073, 
                  7.295917869404712}, {-9.954211537979269, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-10.06612946993563, 
                  8.405770591020906}, {-9.961580490064371, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-10.06037298414713, 
                  9.51590066808263}, {-9.96733697585287, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-8.94925953239972, -9.548943422453192}, \
{-8.856527638154322, -10.477487877146809`}}], 
                 
                 LineBox[{{-8.95497638510937, -8.438806983816963}, \
{-8.850810785444676, -9.366138389733477}}], 
                 
                 LineBox[{{-8.96228808725881, -7.32894381723158}, \
{-8.843499083295232, -8.254515630269307}}], 
                 
                 LineBox[{{-8.971961431548982, -6.219545394190866}, \
{-8.833825739005063, -7.142428127260467}}], 
                 
                 LineBox[{{-8.985338792566127, -5.111003893148586}, \
{-8.820448377987917, -6.029483702253191}}], 
                 
                 LineBox[{{-9.004984748368214, -4.0042252076578855`}, \
{-8.80080242218583, -4.914776461694338}}], 
                 
                 LineBox[{{-9.036397984037748, -2.9016839654012734`}, \
{-8.769389186516296, -3.795831777901395}}], 
                 
                 LineBox[{{-9.093236656302095, -1.8120242779186795`}, \
{-8.712550514251948, -2.6640055393344344`}}], 
                 
                 LineBox[{{-9.2125241467387, -0.7782341001651025}, \
{-8.593263023815345, -1.4763097910384557`}}], 
                 
                 LineBox[{{-9.369411582326267, -0.00881791473191696}, \
{-8.436375588227776, -0.024240050422086316`}}], 
                 
                 LineBox[{{-9.217655822942628, 
                  0.7497967394770438}, {-8.588131347611416, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-9.095606544840964, 
                  1.7800331651848964`}, {-8.71018062571308, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-9.037618564905104, 
                  2.8689923041416465`}, {-8.768168605648942, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-9.005710301695974, 
                  3.9713305482617667`}, {-8.800076868858072, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-8.985815502908004, 
                  5.078031765032994}, {-8.81997166764604, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-8.972297302300573, 
                  6.186537826651089}, {-8.833489868253471, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-8.962537027297753, 
                  7.295917869404712}, {-8.843250143256292, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-8.955168075212653, 
                  8.405770591020906}, {-8.850619095341393, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-8.949411589424152, 
                  9.51590066808263}, {-8.856375581129893, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-7.838298137676744, -9.548943422453192}, \
{-7.745566243431346, -10.477487877146809`}}], 
                 
                 LineBox[{{-7.844014990386392, -8.438806983816963}, \
{-7.739849390721696, -9.366138389733477}}], 
                 
                 LineBox[{{-7.851326692535834, -7.32894381723158}, \
{-7.732537688572255, -8.254515630269307}}], 
                 
                 LineBox[{{-7.861000036826004, -6.219545394190866}, \
{-7.722864344282084, -7.142428127260467}}], 
                 
                 LineBox[{{-7.8743773978431495`, -5.111003893148586}, \
{-7.709486983264939, -6.029483702253191}}], 
                 
                 LineBox[{{-7.894023353645236, -4.0042252076578855`}, \
{-7.689841027462853, -4.914776461694338}}], 
                 
                 LineBox[{{-7.925436589314771, -2.9016839654012734`}, \
{-7.658427791793319, -3.795831777901395}}], 
                 
                 LineBox[{{-7.982275261579118, -1.8120242779186795`}, \
{-7.601589119528971, -2.6640055393344344`}}], 
                 
                 LineBox[{{-8.101562752015722, -0.7782341001651025}, \
{-7.482301629092367, -1.4763097910384557`}}], 
                 
                 LineBox[{{-8.25845018760329, -0.00881791473191696}, \
{-7.325414193504799, -0.024240050422086316`}}], 
                 
                 LineBox[{{-8.106694428219651, 
                  0.7497967394770438}, {-7.477169952888438, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-7.984645150117986, 
                  1.7800331651848964`}, {-7.599219230990104, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-7.926657170182126, 
                  2.8689923041416465`}, {-7.657207210925963, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-7.894748906972995, 
                  3.9713305482617667`}, {-7.689115474135094, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-7.874854108185026, 
                  5.078031765032994}, {-7.709010272923063, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-7.861335907577596, 
                  6.186537826651089}, {-7.7225284735304935`, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-7.851575632574775, 
                  7.295917869404712}, {-7.732288748533313, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-7.844206680489674, 
                  8.405770591020906}, {-7.739657700618415, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-7.838450194701174, 
                  9.51590066808263}, {-7.745414186406916, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-6.727336742953766, -9.548943422453192}, \
{-6.634604848708369, -10.477487877146809`}}], 
                 
                 LineBox[{{-6.7330535956634145`, -8.438806983816963}, \
{-6.628887995998719, -9.366138389733477}}], 
                 
                 LineBox[{{-6.740365297812857, -7.32894381723158}, \
{-6.6215762938492775`, -8.254515630269307}}], 
                 
                 LineBox[{{-6.750038642103027, -6.219545394190866}, \
{-6.611902949559107, -7.142428127260467}}], 
                 
                 LineBox[{{-6.763416003120172, -5.111003893148586}, \
{-6.598525588541961, -6.029483702253191}}], 
                 
                 LineBox[{{-6.783061958922259, -4.0042252076578855`}, \
{-6.578879632739875, -4.914776461694338}}], 
                 
                 LineBox[{{-6.814475194591793, -2.9016839654012734`}, \
{-6.547466397070341, -3.795831777901395}}], 
                 
                 LineBox[{{-6.87131386685614, -1.8120242779186795`}, \
{-6.490627724805994, -2.6640055393344344`}}], 
                 
                 LineBox[{{-6.990601357292745, -0.7782341001651025}, \
{-6.37134023436939, -1.4763097910384557`}}], 
                 
                 LineBox[{{-7.147488792880313, -0.00881791473191696}, \
{-6.214452798781822, -0.024240050422086316`}}], 
                 
                 LineBox[{{-6.995733033496673, 
                  0.7497967394770438}, {-6.366208558165461, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-6.8736837553950085`, 
                  1.7800331651848964`}, {-6.488257836267127, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-6.815695775459148, 
                  2.8689923041416465`}, {-6.546245816202985, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-6.783787512250018, 
                  3.9713305482617667`}, {-6.5781540794121165`, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-6.763892713462049, 
                  5.078031765032994}, {-6.5980488782000855`, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-6.750374512854618, 
                  6.186537826651089}, {-6.611567078807516, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-6.740614237851798, 
                  7.295917869404712}, {-6.621327353810336, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-6.733245285766697, 
                  8.405770591020906}, {-6.628696305895438, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-6.727488799978197, 
                  9.51590066808263}, {-6.634452791683938, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-5.616375348230789, -9.548943422453192}, \
{-5.523643453985391, -10.477487877146809`}}], 
                 
                 LineBox[{{-5.622092200940437, -8.438806983816963}, \
{-5.517926601275741, -9.366138389733477}}], 
                 
                 LineBox[{{-5.629403903089879, -7.32894381723158}, \
{-5.5106148991263, -8.254515630269307}}], 
                 
                 LineBox[{{-5.639077247380049, -6.219545394190866}, \
{-5.500941554836129, -7.142428127260467}}], 
                 
                 LineBox[{{-5.6524546083971945`, -5.111003893148586}, \
{-5.487564193818984, -6.029483702253191}}], 
                 
                 LineBox[{{-5.672100564199281, -4.0042252076578855`}, \
{-5.467918238016898, -4.914776461694338}}], 
                 
                 LineBox[{{-5.703513799868816, -2.9016839654012734`}, \
{-5.436505002347364, -3.795831777901395}}], 
                 
                 LineBox[{{-5.760352472133163, -1.8120242779186795`}, \
{-5.379666330083016, -2.6640055393344344`}}], 
                 
                 LineBox[{{-5.879639962569767, -0.7782341001651025}, \
{-5.260378839646412, -1.4763097910384557`}}], 
                 
                 LineBox[{{-6.036527398157335, -0.00881791473191696}, \
{-5.103491404058844, -0.024240050422086316`}}], 
                 
                 LineBox[{{-5.884771638773696, 
                  0.7497967394770438}, {-5.255247163442483, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-5.762722360672031, 
                  1.7800331651848964`}, {-5.377296441544149, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-5.704734380736171, 
                  2.8689923041416465`}, {-5.435284421480008, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-5.67282611752704, 
                  3.9713305482617667`}, {-5.467192684689139, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-5.652931318739071, 
                  5.078031765032994}, {-5.487087483477108, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-5.639413118131641, 
                  6.186537826651089}, {-5.5006056840845385`, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-5.62965284312882, 
                  7.295917869404712}, {-5.510365959087358, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-5.622283891043719, 
                  8.405770591020906}, {-5.51773491117246, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-5.616527405255219, 
                  9.51590066808263}, {-5.523491396960961, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-4.505413953507811, -9.548943422453192}, \
{-4.412682059262414, -10.477487877146809`}}], 
                 
                 LineBox[{{-4.5111308062174595`, -8.438806983816963}, \
{-4.406965206552764, -9.366138389733477}}], 
                 
                 LineBox[{{-4.518442508366902, -7.32894381723158}, \
{-4.3996535044033225`, -8.254515630269307}}], 
                 
                 LineBox[{{-4.528115852657072, -6.219545394190866}, \
{-4.389980160113152, -7.142428127260467}}], 
                 
                 LineBox[{{-4.541493213674217, -5.111003893148586}, \
{-4.376602799096006, -6.029483702253191}}], 
                 
                 LineBox[{{-4.561139169476304, -4.0042252076578855`}, \
{-4.35695684329392, -4.914776461694338}}], 
                 
                 LineBox[{{-4.592552405145838, -2.9016839654012734`}, \
{-4.325543607624386, -3.795831777901395}}], 
                 
                 LineBox[{{-4.649391077410185, -1.8120242779186795`}, \
{-4.268704935360039, -2.6640055393344344`}}], 
                 
                 LineBox[{{-4.76867856784679, -0.7782341001651025}, \
{-4.149417444923435, -1.4763097910384557`}}], 
                 
                 LineBox[{{-4.925566003434358, -0.00881791473191696}, \
{-3.9925300093358667`, -0.024240050422086316`}}], 
                 
                 LineBox[{{-4.773810244050718, 
                  0.7497967394770438}, {-4.144285768719506, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-4.6517609659490535`, 
                  1.7800331651848964`}, {-4.266335046821172, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-4.593772986013193, 
                  2.8689923041416465`}, {-4.32432302675703, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-4.561864722804063, 
                  3.9713305482617667`}, {-4.3562312899661615`, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-4.541969924016094, 
                  5.078031765032994}, {-4.3761260887541304`, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-4.528451723408663, 
                  6.186537826651089}, {-4.389644289361561, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-4.518691448405843, 
                  7.295917869404712}, {-4.399404564364381, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-4.511322496320742, 
                  8.405770591020906}, {-4.406773516449483, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-4.505566010532242, 
                  9.51590066808263}, {-4.412530002237983, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-3.394452558784833, -9.548943422453192}, \
{-3.301720664539435, -10.477487877146809`}}], 
                 
                 LineBox[{{-3.400169411494482, -8.438806983816963}, \
{-3.2960038118297863`, -9.366138389733477}}], 
                 
                 LineBox[{{-3.407481113643924, -7.32894381723158}, \
{-3.288692109680345, -8.254515630269307}}], 
                 
                 LineBox[{{-3.4171544579340942`, -6.219545394190866}, \
{-3.279018765390174, -7.142428127260467}}], 
                 
                 LineBox[{{-3.4305318189512395`, -5.111003893148586}, \
{-3.2656414043730293`, -6.029483702253191}}], 
                 
                 LineBox[{{-3.450177774753326, -4.0042252076578855`}, \
{-3.245995448570942, -4.914776461694338}}], 
                 
                 LineBox[{{-3.4815910104228607`, -2.9016839654012734`}, \
{-3.2145822129014077`, -3.795831777901395}}], 
                 
                 LineBox[{{-3.5384296826872075`, -1.8120242779186795`}, \
{-3.1577435406370613`, -2.6640055393344344`}}], 
                 
                 LineBox[{{-3.657717173123812, -0.7782341001651025}, \
{-3.0384560502004563`, -1.4763097910384557`}}], 
                 
                 LineBox[{{-3.8146046087113796`, -0.00881791473191696}, \
{-2.881568614612889, -0.024240050422086316`}}], 
                 
                 LineBox[{{-3.662848849327741, 
                  0.7497967394770438}, {-3.0333243739965274`, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-3.540799571226075, 
                  1.7800331651848964`}, {-3.155373652098193, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-3.482811591290216, 
                  2.8689923041416465`}, {-3.213361632034053, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-3.450903328081085, 
                  3.9713305482617667`}, {-3.245269895243183, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-3.431008529293116, 
                  5.078031765032994}, {-3.265164694031152, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-3.4174903286856853`, 
                  6.186537826651089}, {-3.2786828946385826`, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-3.407730053682865, 
                  7.295917869404712}, {-3.2884431696414036`, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-3.4003611015977637`, 
                  8.405770591020906}, {-3.2958121217265046`, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-3.3946046158092633`, 
                  9.51590066808263}, {-3.3015686075150046`, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-2.283491164061855, -9.548943422453192}, \
{-2.190759269816457, -10.477487877146809`}}], 
                 
                 LineBox[{{-2.289208016771504, -8.438806983816963}, \
{-2.1850424171068084`, -9.366138389733477}}], 
                 
                 LineBox[{{-2.296519718920946, -7.32894381723158}, \
{-2.177730714957367, -8.254515630269307}}], 
                 
                 LineBox[{{-2.3061930632111163`, -6.219545394190866}, \
{-2.168057370667196, -7.142428127260467}}], 
                 
                 LineBox[{{-2.3195704242282615`, -5.111003893148586}, \
{-2.1546800096500514`, -6.029483702253191}}], 
                 
                 LineBox[{{-2.339216380030348, -4.0042252076578855`}, \
{-2.135034053847964, -4.914776461694338}}], 
                 
                 LineBox[{{-2.3706296156998823`, -2.9016839654012734`}, \
{-2.10362081817843, -3.795831777901395}}], 
                 
                 LineBox[{{-2.4274682879642295`, -1.8120242779186795`}, \
{-2.046782145914083, -2.6640055393344344`}}], 
                 
                 LineBox[{{-2.5467557784008337`, -0.7782341001651025}, \
{-1.9274946554774786`, -1.4763097910384557`}}], 
                 
                 LineBox[{{-2.7036432139884017`, -0.00881791473191696}, \
{-1.7706072198899108`, -0.024240050422086316`}}], 
                 
                 LineBox[{{-2.5518874546047625`, 
                  0.7497967394770438}, {-1.9223629792735497`, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-2.429838176503097, 
                  1.7800331651848964`}, {-2.0444122573752153`, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-2.371850196567238, 
                  2.8689923041416465`}, {-2.102400237311075, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-2.339941933358107, 
                  3.9713305482617667`}, {-2.134308500520205, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-2.320047134570138, 
                  5.078031765032994}, {-2.1542032993081746`, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-2.3065289339627073`, 
                  6.186537826651089}, {-2.1677214999156047`, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-2.2967686589598872`, 
                  7.295917869404712}, {-2.1774817749184256`, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-2.289399706874786, 
                  8.405770591020906}, {-2.1848507270035267`, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-2.2836432210862854`, 
                  9.51590066808263}, {-2.1906072127920266`, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-1.1725297693388772`, -9.548943422453192}, \
{-1.0797978750934794`, -10.477487877146809`}}], 
                 
                 LineBox[{{-1.1782466220485261`, -8.438806983816963}, \
{-1.0740810223838306`, -9.366138389733477}}], 
                 
                 LineBox[{{-1.1855583241979677`, -7.32894381723158}, \
{-1.0667693202343889`, -8.254515630269307}}], 
                 
                 LineBox[{{-1.1952316684881383`, -6.219545394190866}, \
{-1.0570959759442182`, -7.142428127260467}}], 
                 
                 LineBox[{{-1.2086090295052834`, -5.111003893148586}, \
{-1.043718614927073, -6.029483702253191}}], 
                 
                 LineBox[{{-1.2282549853073703`, -4.0042252076578855`}, \
{-1.0240726591249862`, -4.914776461694338}}], 
                 
                 LineBox[{{-1.2596682209769046`, -2.9016839654012734`}, \
{-0.992659423455452, -3.795831777901395}}], 
                 
                 LineBox[{{-1.3165068932412514`, -1.8120242779186795`}, \
{-0.9358207511911051, -2.6640055393344344`}}], 
                 
                 LineBox[{{-1.435794383677856, -0.7782341001651025}, \
{-0.8165332607545006, -1.4763097910384557`}}], 
                 
                 LineBox[{{-1.5926818192654237`, -0.00881791473191696}, \
{-0.6596458251669329, -0.024240050422086316`}}], 
                 
                 LineBox[{{-1.4409260598817848`, 
                  0.7497967394770438}, {-0.8114015845505718, 
                  1.438631221418508}}], 
                 
                 LineBox[{{-1.3188767817801192`, 
                  1.7800331651848964`}, {-0.9334508626522373, 
                  2.6298807217602107`}}], 
                 
                 LineBox[{{-1.2608888018442597`, 
                  2.8689923041416465`}, {-0.9914388425880969, 
                  3.7624075088530153`}}], 
                 
                 LineBox[{{-1.2289805386351291`, 
                  3.9713305482617667`}, {-1.0233471057972274`, 
                  4.881555190782449}}], 
                 
                 LineBox[{{-1.20908573984716, 
                  5.078031765032994}, {-1.0432419045851966`, 
                  5.996339900060778}}], 
                 
                 LineBox[{{-1.1955675392397296`, 
                  6.186537826651089}, {-1.056760105192627, 
                  7.109319764492237}}], 
                 
                 LineBox[{{-1.185807264236909, 
                  7.295917869404712}, {-1.0665203801954473`, 
                  8.221425647788168}}], 
                 
                 LineBox[{{-1.1784383121518078`, 
                  8.405770591020906}, {-1.0738893322805485`, 
                  9.333058852221534}}], 
                 
                 LineBox[{{-1.1726818263633076`, 
                  9.51590066808263}, {-1.079645818069049, 
                  10.444414701209364`}}], 
                 
                 LineBox[{{-0.06156837461589925, -9.548943422453192}, {
                  0.031163519629498586`, -10.477487877146809`}}], 
                 
                 LineBox[{{-0.06728522732554812, -8.438806983816963}, {
                  0.03688037233914745, -9.366138389733477}}], 
                 
                 LineBox[{{-0.07459692947498979, -7.32894381723158}, {
                  0.044192074488589125`, -8.254515630269307}}], 
                 
                 LineBox[{{-0.08427027376516034, -6.219545394190866}, {
                  0.05386541877875968, -7.142428127260467}}], 
                 
                 LineBox[{{-0.09764763478230551, -5.111003893148586}, {
                  0.06724277979590484, -6.029483702253191}}], 
                 
                 LineBox[{{-0.11729359058439236`, -4.0042252076578855`}, {
                  0.08688873559799169, -4.914776461694338}}], 
                 
                 LineBox[{{-0.14870682625392662`, -2.9016839654012734`}, {
                  0.11830197126752595`, -3.795831777901395}}], 
                 
                 LineBox[{{-0.2055454985182735, -1.8120242779186795`}, {
                  0.17514064353187284`, -2.6640055393344344`}}], 
                 
                 LineBox[{{-0.324832988954878, -0.7782341001651025}, {
                  0.29442813396847733`, -1.4763097910384557`}}], 
                 
                 LineBox[{{-0.4817204245424457, -0.00881791473191696}, {
                  0.451315569556045, -0.024240050422086316`}}], 
                 
                 LineBox[{{-0.32996466515880685`, 0.7497967394770438}, {
                  0.2995598101724062, 1.438631221418508}}], 
                 
                 LineBox[{{-0.20791538705714133`, 1.7800331651848964`}, {
                  0.17751053207074066`, 2.6298807217602107`}}], 
                 
                 LineBox[{{-0.14992740712128175`, 2.8689923041416465`}, {
                  0.11952255213488108`, 3.7624075088530153`}}], 
                 
                 LineBox[{{-0.11801914391215113`, 3.9713305482617667`}, {
                  0.08761428892575046, 4.881555190782449}}], 
                 
                 LineBox[{{-0.09812434512418211, 5.078031765032994}, {
                  0.06771949013778145, 5.996339900060778}}], 
                 
                 LineBox[{{-0.08460614451675162, 6.186537826651089}, {
                  0.05420128953035096, 7.109319764492237}}], 
                 
                 LineBox[{{-0.07484586951393121, 7.295917869404712}, {
                  0.04444101452753055, 8.221425647788168}}], 
                 
                 LineBox[{{-0.06747691742882998, 8.405770591020906}, {
                  0.03707206244242932, 9.333058852221534}}], 
                 
                 LineBox[{{-0.06172043164032969, 9.51590066808263}, {
                  0.03131557665392903, 10.444414701209364`}}], 
                 
                 LineBox[{{1.0493930201070787`, -9.548943422453192}, {
                  1.1421249143524765`, -10.477487877146809`}}], 
                 
                 LineBox[{{1.0436761673974297`, -8.438806983816963}, {
                  1.1478417670621253`, -9.366138389733477}}], 
                 
                 LineBox[{{1.0363644652479882`, -7.32894381723158}, {
                  1.155153469211567, -8.254515630269307}}], 
                 
                 LineBox[{{1.0266911209578176`, -6.219545394190866}, {
                  1.1648268135017377`, -7.142428127260467}}], 
                 
                 LineBox[{{1.0133137599406725`, -5.111003893148586}, {
                  1.178204174518883, -6.029483702253191}}], 
                 
                 LineBox[{{0.9936678041385856, -4.0042252076578855`}, {
                  1.1978501303209697`, -4.914776461694338}}], 
                 
                 LineBox[{{0.9622545684690513, -2.9016839654012734`}, {
                  1.229263365990504, -3.795831777901395}}], 
                 
                 LineBox[{{0.9054158962047044, -1.8120242779186795`}, {
                  1.286102038254851, -2.6640055393344344`}}], 
                 
                 LineBox[{{0.7861284057681, -0.7782341001651025}, {
                  1.4053895286914553`, -1.4763097910384557`}}], 
                 
                 LineBox[{{0.6292409701805323, -0.00881791473191696}, {
                  1.5622769642790226`, -0.024240050422086316`}}], 
                 
                 LineBox[{{0.7809967295641711, 0.7497967394770438}, {
                  1.4105212048953841`, 1.438631221418508}}], 
                 
                 LineBox[{{0.9030460076658366, 1.7800331651848964`}, {
                  1.2884719267937186`, 2.6298807217602107`}}], 
                 
                 LineBox[{{0.9610339876016962, 2.8689923041416465`}, {
                  1.230483946857859, 3.7624075088530153`}}], 
                 
                 LineBox[{{0.9929422508108268, 3.9713305482617667`}, {
                  1.1985756836487285`, 4.881555190782449}}], 
                 
                 LineBox[{{1.012837049598796, 5.078031765032994}, {
                  1.1786808848607593`, 5.996339900060778}}], 
                 
                 LineBox[{{1.0263552502062263`, 6.186537826651089}, {
                  1.165162684253329, 7.109319764492237}}], 
                 
                 LineBox[{{1.0361155252090468`, 7.295917869404712}, {
                  1.1554024092505086`, 8.221425647788168}}], 
                 
                 LineBox[{{1.043484477294148, 8.405770591020906}, {
                  1.1480334571654074`, 9.333058852221534}}], 
                 
                 LineBox[{{1.0492409630826482`, 9.51590066808263}, {
                  1.142276971376907, 10.444414701209364`}}], 
                 
                 LineBox[{{2.160354414830057, -9.548943422453192}, {
                  2.2530863090754547`, -10.477487877146809`}}], 
                 
                 LineBox[{{2.1546375621204077`, -8.438806983816963}, {
                  2.2588031617851034`, -9.366138389733477}}], 
                 
                 LineBox[{{2.147325859970966, -7.32894381723158}, {
                  2.2661148639345448`, -8.254515630269307}}], 
                 
                 LineBox[{{2.1376525156807955`, -6.219545394190866}, {
                  2.2757882082247156`, -7.142428127260467}}], 
                 
                 LineBox[{{2.1242751546636502`, -5.111003893148586}, {
                  2.2891655692418604`, -6.029483702253191}}], 
                 
                 LineBox[{{2.1046291988615637`, -4.0042252076578855`}, {
                  2.308811525043948, -4.914776461694338}}], 
                 
                 LineBox[{{2.0732159631920295`, -2.9016839654012734`}, {
                  2.3402247607134816`, -3.795831777901395}}], 
                 
                 LineBox[{{2.0163772909276823`, -1.8120242779186795`}, {
                  2.3970634329778284`, -2.6640055393344344`}}], 
                 
                 LineBox[{{1.897089800491078, -0.7782341001651025}, {
                  2.516350923414433, -1.4763097910384557`}}], 
                 
                 LineBox[{{1.74020236490351, -0.00881791473191696}, {
                  2.673238359002001, -0.024240050422086316`}}], 
                 
                 LineBox[{{1.891958124287149, 0.7497967394770438}, {
                  2.521482599618362, 1.438631221418508}}], 
                 
                 LineBox[{{2.0140074023888146`, 1.7800331651848964`}, {
                  2.3994333215166965`, 2.6298807217602107`}}], 
                 
                 LineBox[{{2.071995382324674, 2.8689923041416465`}, {
                  2.3414453415808367`, 3.7624075088530153`}}], 
                 
                 LineBox[{{2.103903645533805, 3.9713305482617667`}, {
                  2.3095370783717066`, 4.881555190782449}}], 
                 
                 LineBox[{{2.123798444321774, 5.078031765032994}, {
                  2.2896422795837372`, 5.996339900060778}}], 
                 
                 LineBox[{{2.1373166449292045`, 6.186537826651089}, {
                  2.276124078976307, 7.109319764492237}}], 
                 
                 LineBox[{{2.1470769199320245`, 7.295917869404712}, {
                  2.266363803973486, 8.221425647788168}}], 
                 
                 LineBox[{{2.154445872017126, 8.405770591020906}, {
                  2.258994851888385, 9.333058852221534}}], 
                 
                 LineBox[{{2.1602023578056264`, 9.51590066808263}, {
                  2.253238366099885, 10.444414701209364`}}], 
                 LineBox[{{3.271315809553035, -9.548943422453192}, {
                  3.3640477037984327`, -10.477487877146809`}}], 
                 
                 LineBox[{{3.2655989568433856`, -8.438806983816963}, {
                  3.3697645565080814`, -9.366138389733477}}], 
                 
                 LineBox[{{3.258287254693944, -7.32894381723158}, {
                  3.3770762586575227`, -8.254515630269307}}], 
                 
                 LineBox[{{3.2486139104037735`, -6.219545394190866}, {
                  3.3867496029476936`, -7.142428127260467}}], 
                 
                 LineBox[{{3.235236549386628, -5.111003893148586}, {
                  3.4001269639648384`, -6.029483702253191}}], 
                 
                 LineBox[{{3.2155905935845417`, -4.0042252076578855`}, {
                  3.4197729197669258`, -4.914776461694338}}], 
                 
                 LineBox[{{3.184177357915007, -2.9016839654012734`}, {
                  3.45118615543646, -3.795831777901395}}], 
                 
                 LineBox[{{3.12733868565066, -1.8120242779186795`}, {
                  3.5080248277008064`, -2.6640055393344344`}}], 
                 
                 LineBox[{{3.0080511952140556`, -0.7782341001651025}, {
                  3.6273123181374114`, -1.4763097910384557`}}], 
                 
                 LineBox[{{2.851163759626488, -0.00881791473191696}, {
                  3.7841997537249785`, -0.024240050422086316`}}], 
                 
                 LineBox[{{3.0029195190101268`, 0.7497967394770438}, {
                  3.6324439943413402`, 1.438631221418508}}], 
                 
                 LineBox[{{3.1249687971117925`, 1.7800331651848964`}, {
                  3.5103947162396745`, 2.6298807217602107`}}], 
                 
                 LineBox[{{3.182956777047652, 2.8689923041416465`}, {
                  3.4524067363038147`, 3.7624075088530153`}}], 
                 
                 LineBox[{{3.214865040256783, 3.9713305482617667`}, {
                  3.4204984730946846`, 4.881555190782449}}], 
                 
                 LineBox[{{3.234759839044752, 5.078031765032994}, {
                  3.4006036743067156`, 5.996339900060778}}], 
                 
                 LineBox[{{3.2482780396521824`, 6.186537826651089}, {
                  3.387085473699285, 7.109319764492237}}], 
                 
                 LineBox[{{3.2580383146550025`, 7.295917869404712}, {
                  3.377325198696464, 8.221425647788168}}], 
                 
                 LineBox[{{3.265407266740104, 8.405770591020906}, {
                  3.369956246611363, 9.333058852221534}}], 
                 
                 LineBox[{{3.2711637525286044`, 9.51590066808263}, {
                  3.364199760822863, 10.444414701209364`}}], 
                 
                 LineBox[{{4.382277204276012, -9.548943422453192}, {
                  4.47500909852141, -10.477487877146809`}}], 
                 
                 LineBox[{{4.376560351566364, -8.438806983816963}, {
                  4.48072595123106, -9.366138389733477}}], 
                 
                 LineBox[{{4.369248649416922, -7.32894381723158}, {
                  4.488037653380501, -8.254515630269307}}], 
                 
                 LineBox[{{4.359575305126752, -6.219545394190866}, {
                  4.497710997670672, -7.142428127260467}}], 
                 
                 LineBox[{{4.346197944109607, -5.111003893148586}, {
                  4.511088358687817, -6.029483702253191}}], 
                 
                 LineBox[{{4.32655198830752, -4.0042252076578855`}, {
                  4.530734314489903, -4.914776461694338}}], 
                 
                 LineBox[{{4.295138752637985, -2.9016839654012734`}, {
                  4.5621475501594375`, -3.795831777901395}}], 
                 
                 LineBox[{{4.238300080373638, -1.8120242779186795`}, {
                  4.618986222423785, -2.6640055393344344`}}], 
                 
                 LineBox[{{4.119012589937034, -0.7782341001651025}, {
                  4.738273712860389, -1.4763097910384557`}}], 
                 
                 LineBox[{{3.962125154349466, -0.00881791473191696}, {
                  4.895161148447957, -0.024240050422086316`}}], 
                 
                 LineBox[{{4.113880913733105, 0.7497967394770438}, {
                  4.743405389064318, 1.438631221418508}}], 
                 
                 LineBox[{{4.23593019183477, 1.7800331651848964`}, {
                  4.621356110962652, 2.6298807217602107`}}], 
                 
                 LineBox[{{4.29391817177063, 2.8689923041416465`}, {
                  4.5633681310267935`, 3.7624075088530153`}}], 
                 
                 LineBox[{{4.325826434979761, 3.9713305482617667`}, {
                  4.531459867817662, 4.881555190782449}}], 
                 
                 LineBox[{{4.34572123376773, 5.078031765032994}, {
                  4.511565069029693, 5.996339900060778}}], 
                 LineBox[{{4.35923943437516, 6.186537826651089}, {
                  4.4980468684222625`, 7.109319764492237}}], 
                 
                 LineBox[{{4.368999709377981, 7.295917869404712}, {
                  4.488286593419443, 8.221425647788168}}], 
                 
                 LineBox[{{4.376368661463082, 8.405770591020906}, {
                  4.480917641334341, 9.333058852221534}}], 
                 
                 LineBox[{{4.382125147251582, 9.51590066808263}, {
                  4.47516115554584, 10.444414701209364`}}], 
                 
                 LineBox[{{5.49323859899899, -9.548943422453192}, {
                  5.585970493244387, -10.477487877146809`}}], 
                 
                 LineBox[{{5.4875217462893415`, -8.438806983816963}, {
                  5.591687345954037, -9.366138389733477}}], 
                 
                 LineBox[{{5.480210044139899, -7.32894381723158}, {
                  5.598999048103479, -8.254515630269307}}], 
                 
                 LineBox[{{5.470536699849729, -6.219545394190866}, {
                  5.6086723923936495`, -7.142428127260467}}], 
                 
                 LineBox[{{5.457159338832584, -5.111003893148586}, {
                  5.622049753410795, -6.029483702253191}}], 
                 
                 LineBox[{{5.437513383030497, -4.0042252076578855`}, {
                  5.641695709212881, -4.914776461694338}}], 
                 
                 LineBox[{{5.406100147360963, -2.9016839654012734`}, {
                  5.673108944882415, -3.795831777901395}}], 
                 
                 LineBox[{{5.349261475096616, -1.8120242779186795`}, {
                  5.729947617146762, -2.6640055393344344`}}], 
                 
                 LineBox[{{5.2299739846600115`, -0.7782341001651025}, {
                  5.849235107583366, -1.4763097910384557`}}], 
                 
                 LineBox[{{5.0730865490724435`, -0.00881791473191696}, {
                  6.006122543170934, -0.024240050422086316`}}], 
                 
                 LineBox[{{5.224842308456083, 0.7497967394770438}, {
                  5.854366783787295, 1.438631221418508}}], 
                 
                 LineBox[{{5.3468915865577475`, 1.7800331651848964`}, {
                  5.7323175056856295`, 2.6298807217602107`}}], 
                 
                 LineBox[{{5.404879566493608, 2.8689923041416465`}, {
                  5.674329525749771, 3.7624075088530153`}}], 
                 
                 LineBox[{{5.436787829702738, 3.9713305482617667`}, {
                  5.64242126254064, 4.881555190782449}}], 
                 
                 LineBox[{{5.456682628490707, 5.078031765032994}, {
                  5.622526463752671, 5.996339900060778}}], 
                 
                 LineBox[{{5.470200829098138, 6.186537826651089}, {
                  5.60900826314524, 7.109319764492237}}], 
                 
                 LineBox[{{5.479961104100958, 7.295917869404712}, {
                  5.59924798814242, 8.221425647788168}}], 
                 
                 LineBox[{{5.487330056186059, 8.405770591020906}, {
                  5.5918790360573185`, 9.333058852221534}}], 
                 
                 LineBox[{{5.493086541974559, 9.51590066808263}, {
                  5.586122550268818, 10.444414701209364`}}], 
                 
                 LineBox[{{6.604199993721967, -9.548943422453192}, {
                  6.696931887967365, -10.477487877146809`}}], 
                 
                 LineBox[{{6.598483141012319, -8.438806983816963}, {
                  6.702648740677015, -9.366138389733477}}], 
                 
                 LineBox[{{6.591171438862877, -7.32894381723158}, {
                  6.709960442826456, -8.254515630269307}}], 
                 
                 LineBox[{{6.581498094572707, -6.219545394190866}, {
                  6.719633787116627, -7.142428127260467}}], 
                 
                 LineBox[{{6.568120733555562, -5.111003893148586}, {
                  6.733011148133772, -6.029483702253191}}], 
                 
                 LineBox[{{6.548474777753475, -4.0042252076578855`}, {
                  6.752657103935858, -4.914776461694338}}], 
                 
                 LineBox[{{6.51706154208394, -2.9016839654012734`}, {
                  6.7840703396053925`, -3.795831777901395}}], 
                 
                 LineBox[{{6.460222869819593, -1.8120242779186795`}, {
                  6.84090901186974, -2.6640055393344344`}}], 
                 
                 LineBox[{{6.340935379382989, -0.7782341001651025}, {
                  6.960196502306344, -1.4763097910384557`}}], 
                 
                 LineBox[{{6.184047943795421, -0.00881791473191696}, {
                  7.117083937893912, -0.024240050422086316`}}], 
                 
                 LineBox[{{6.33580370317906, 0.7497967394770438}, {
                  6.965328178510273, 1.438631221418508}}], 
                 LineBox[{{6.457852981280725, 1.7800331651848964`}, {
                  6.843278900408607, 2.6298807217602107`}}], 
                 
                 LineBox[{{6.515840961216585, 2.8689923041416465`}, {
                  6.7852909204727485`, 3.7624075088530153`}}], 
                 
                 LineBox[{{6.547749224425716, 3.9713305482617667`}, {
                  6.753382657263617, 4.881555190782449}}], 
                 
                 LineBox[{{6.567644023213685, 5.078031765032994}, {
                  6.733487858475648, 5.996339900060778}}], 
                 
                 LineBox[{{6.581162223821115, 6.186537826651089}, {
                  6.7199696578682175`, 7.109319764492237}}], 
                 
                 LineBox[{{6.590922498823936, 7.295917869404712}, {
                  6.710209382865398, 8.221425647788168}}], 
                 
                 LineBox[{{6.598291450909037, 8.405770591020906}, {
                  6.702840430780296, 9.333058852221534}}], 
                 
                 LineBox[{{6.604047936697537, 9.51590066808263}, {
                  6.697083944991795, 10.444414701209364`}}], 
                 
                 LineBox[{{7.715161388444945, -9.548943422453192}, {
                  7.807893282690342, -10.477487877146809`}}], 
                 
                 LineBox[{{7.7094445357352965`, -8.438806983816963}, {
                  7.813610135399992, -9.366138389733477}}], 
                 
                 LineBox[{{7.702132833585854, -7.32894381723158}, {
                  7.820921837549434, -8.254515630269307}}], 
                 
                 LineBox[{{7.692459489295684, -6.219545394190866}, {
                  7.8305951818396045`, -7.142428127260467}}], 
                 
                 LineBox[{{7.679082128278539, -5.111003893148586}, {
                  7.84397254285675, -6.029483702253191}}], 
                 
                 LineBox[{{7.659436172476452, -4.0042252076578855`}, {
                  7.863618498658836, -4.914776461694338}}], 
                 
                 LineBox[{{7.628022936806918, -2.9016839654012734`}, {
                  7.89503173432837, -3.795831777901395}}], 
                 
                 LineBox[{{7.571184264542571, -1.8120242779186795`}, {
                  7.951870406592717, -2.6640055393344344`}}], 
                 
                 LineBox[{{7.4518967741059665`, -0.7782341001651025}, {
                  8.071157897029321, -1.4763097910384557`}}], 
                 
                 LineBox[{{7.2950093385183985`, -0.00881791473191696}, {
                  8.22804533261689, -0.024240050422086316`}}], 
                 
                 LineBox[{{7.446765097902038, 0.7497967394770438}, {
                  8.07628957323325, 1.438631221418508}}], 
                 
                 LineBox[{{7.5688143760037025`, 1.7800331651848964`}, {
                  7.954240295131585, 2.6298807217602107`}}], 
                 
                 LineBox[{{7.626802355939563, 2.8689923041416465`}, {
                  7.896252315195725, 3.7624075088530153`}}], 
                 
                 LineBox[{{7.658710619148693, 3.9713305482617667`}, {
                  7.864344051986595, 4.881555190782449}}], 
                 
                 LineBox[{{7.678605417936662, 5.078031765032994}, {
                  7.844449253198626, 5.996339900060778}}], 
                 
                 LineBox[{{7.692123618544093, 6.186537826651089}, {
                  7.830931052591195, 7.109319764492237}}], 
                 
                 LineBox[{{7.701883893546913, 7.295917869404712}, {
                  7.821170777588375, 8.221425647788168}}], 
                 
                 LineBox[{{7.709252845632014, 8.405770591020906}, {
                  7.8138018255032735`, 9.333058852221534}}], 
                 
                 LineBox[{{7.715009331420514, 9.51590066808263}, {
                  7.808045339714773, 10.444414701209364`}}], 
                 
                 LineBox[{{8.826122783167923, -9.548943422453192}, {
                  8.918854677413321, -10.477487877146809`}}], 
                 
                 LineBox[{{8.820405930458273, -8.438806983816963}, {
                  8.924571530122968, -9.366138389733477}}], 
                 
                 LineBox[{{8.813094228308833, -7.32894381723158}, {
                  8.931883232272412, -8.254515630269307}}], 
                 
                 LineBox[{{8.803420884018662, -6.219545394190866}, {
                  8.941556576562581, -7.142428127260467}}], 
                 
                 LineBox[{{8.790043523001517, -5.111003893148586}, {
                  8.954933937579726, -6.029483702253191}}], 
                 
                 LineBox[{{8.77039756719943, -4.0042252076578855`}, {
                  8.974579893381813, -4.914776461694338}}], 
                 
                 LineBox[{{8.738984331529895, -2.9016839654012734`}, {
                  9.005993129051348, -3.795831777901395}}], 
                 LineBox[{{8.682145659265549, -1.8120242779186795`}, {
                  9.062831801315696, -2.6640055393344344`}}], 
                 
                 LineBox[{{8.562858168828944, -0.7782341001651025}, {
                  9.182119291752299, -1.4763097910384557`}}], 
                 
                 LineBox[{{8.405970733241377, -0.00881791473191696}, {
                  9.339006727339868, -0.024240050422086316`}}], 
                 
                 LineBox[{{8.557726492625015, 0.7497967394770438}, {
                  9.187250967956228, 1.438631221418508}}], 
                 
                 LineBox[{{8.67977577072668, 1.7800331651848964`}, {
                  9.065201689854563, 2.6298807217602107`}}], 
                 
                 LineBox[{{8.73776375066254, 2.8689923041416465`}, {
                  9.007213709918702, 3.7624075088530153`}}], 
                 
                 LineBox[{{8.76967201387167, 3.9713305482617667`}, {
                  8.975305446709571, 4.881555190782449}}], 
                 
                 LineBox[{{8.78956681265964, 5.078031765032994}, {
                  8.955410647921603, 5.996339900060778}}], 
                 
                 LineBox[{{8.80308501326707, 6.186537826651089}, {
                  8.941892447314173, 7.109319764492237}}], 
                 
                 LineBox[{{8.81284528826989, 7.295917869404712}, {
                  8.932132172311352, 8.221425647788168}}], 
                 
                 LineBox[{{8.820214240354991, 8.405770591020906}, {
                  8.92476322022625, 9.333058852221534}}], 
                 
                 LineBox[{{8.825970726143492, 9.51590066808263}, {
                  8.919006734437751, 10.444414701209364`}}], 
                 
                 LineBox[{{9.9370841778909, -9.548943422453192}, {
                  10.029816072136299`, -10.477487877146809`}}], 
                 
                 LineBox[{{9.93136732518125, -8.438806983816963}, {
                  10.035532924845946`, -9.366138389733477}}], 
                 
                 LineBox[{{9.92405562303181, -7.32894381723158}, {
                  10.04284462699539, -8.254515630269307}}], 
                 
                 LineBox[{{9.91438227874164, -6.219545394190866}, {
                  10.052517971285559`, -7.142428127260467}}], 
                 
                 LineBox[{{9.901004917724494, -5.111003893148586}, {
                  10.065895332302704`, -6.029483702253191}}], 
                 
                 LineBox[{{9.881358961922407, -4.0042252076578855`}, {
                  10.08554128810479, -4.914776461694338}}], 
                 
                 LineBox[{{9.849945726252873, -2.9016839654012734`}, {
                  10.116954523774325`, -3.795831777901395}}], 
                 
                 LineBox[{{9.793107053988527, -1.8120242779186795`}, {
                  10.173793196038673`, -2.6640055393344344`}}], 
                 
                 LineBox[{{9.673819563551922, -0.7782341001651025}, {
                  10.293080686475276`, -1.4763097910384557`}}], 
                 
                 LineBox[{{9.516932127964354, -0.00881791473191696}, {
                  10.449968122062845`, -0.024240050422086316`}}], 
                 
                 LineBox[{{9.668687887347993, 0.7497967394770438}, {
                  10.298212362679205`, 1.438631221418508}}], 
                 
                 LineBox[{{9.790737165449658, 1.7800331651848964`}, {
                  10.17616308457754, 2.6298807217602107`}}], 
                 
                 LineBox[{{9.848725145385517, 2.8689923041416465`}, {
                  10.11817510464168, 3.7624075088530153`}}], 
                 
                 LineBox[{{9.880633408594647, 3.9713305482617667`}, {
                  10.086266841432549`, 4.881555190782449}}], 
                 
                 LineBox[{{9.900528207382617, 5.078031765032994}, {
                  10.06637204264458, 5.996339900060778}}], 
                 
                 LineBox[{{9.914046407990048, 6.186537826651089}, {
                  10.05285384203715, 7.109319764492237}}], 
                 
                 LineBox[{{9.923806682992868, 7.295917869404712}, {
                  10.04309356703433, 8.221425647788168}}], 
                 
                 LineBox[{{9.931175635077969, 8.405770591020906}, {
                  10.035724614949228`, 9.333058852221534}}], 
                 
                 LineBox[{{9.93693212086647, 9.51590066808263}, {
                  10.029968129160729`, 10.444414701209364`}}]}}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    Nearest[CompressedData["
1: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
iQq+Lt7oNgzzoIEvtcSvPU92UsFXTO5eoT1UGvha7HpT/AO9E3y5XHNWbj3a
Bb62PLOeOmXZCb68Vymf96LTwJfSfHJNPrUTfMX9djzp7UkDXwKyZ8mvtKng
K3zkQ+33vTTwJbqFY6vuSAVfD7Q0tr3D34988XFjvxzH3498dew4bx+C74d8
NfbbVT29TwVf5zpLBd3x/ZGvHYYikq/x/ZGvPz8Oc93xfshXotJVvVK8H/Il
vsHR1BHvj3yFTZyl1eL9ka/+MdJwPu4H+apSntfywv0gX1H+u3bn9lDAlzhF
7FK5AQV8sY6dtF/CpYAv4vepA1baFPBlm7Ylim+MAr4MslavtlGlgK/JlQkX
+uco4CtXvczolgwFfNnNn+FvEW8HX7omExmP+Sjgy2K/5O7fGu3gy4J35yWn
wTbwdSJMqeCaYzv4MqnbNDdW2Aa+lkVG1SfUt4OvuDdvhluOtYGvk4NO5iIR
78DXAfuPZ47dbwVfQt4lkWsjO8DXg87ENQYxLeBrHUHjl0/MO/Dlf1um6HNE
K/g6c6twyK+xHXztq09pGLFoA1/7bXJKrjm3gy+rT89mxvLbwJfNrFHSJs12
8GVgISC240Mb+OqZezEfK9EOvsimWXkdvBTwNbv1kInrHwr4ypTisZuRpoAv
DZ9bv9zwfsjXxY6mwikVCvg6w8hvs8L7I197Lj/pF8T7I18/nC8vHsX9IF+5
/f3PfXA/yBdJUMFHp5oMvkyspzIM15LBl+R73ZSEBjL4+nmTETwsTQZfCWri
5LgOMvjy1V508oswGXypZvinunHI4GuQkBgkPk8CX8n3sN2npsng61oPrX/D
CAl8RVBnvW+vbARf4bGymVONJPAVLcE/ssi0EXwFHxbRCogngS/DlVfm1r9s
BF+tZs8VrXaQwNd9z4MRqRebwFfgZNND7tUG8LWPL+FtkWsz+GqzvWFN8awH
X2cPrdwucLUJfBVLzX/ydW0AXw/E4xUEcxvB1/UjwX+8t5PA140vUV8WHWoE
X3E+4eoBcSTwlRCuSquUagRfPuxPJiQyCXyJ3o3coThDBl/zvXc/2gyTwJc6
YWvIT3x/5IudMZgU9ocEvlz5nbf/xvshXy9s8j6F4v2Qr4dOcfwjeH/ky3/u
plQC3h/52jxzBPPD/SBf793qWPy4H+Tr12Y+22g9AvjioRbWZC6rBV9JA7uy
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
                    "] -> CompressedData["
1:eJxF2ns8k///x3FGTnPa2DDZzNYJSSk6yK6QDp9Q5FgOFalUkhChRJQOiEIk
OXVQySGUw4ZKLakQKpJDSjmsrUROv+v3x/v1/Wf793o/H/fbbdd2jbnbz86b
ICYm1oy//P97uYL4hvd0Nu9LcvVcJQ0Wr7h/rMJ1lMWbXhS5OeQ3m/d6gJta
x2TzdE5p2BZ80eZlElf6HBpi8TYcLgkPqtThqTHqf5+ax+ZdGerPa9uqxbNr
WU4s/M7iPbi1r9v2tDaP1enQeUyXzVObL3b67Rd13gZqNquyj8WbONZ8vyNx
Lq+WQDW3Wcrm0VboiRf4q/LujPZU93SyeCrP6icM6eo8NZeJzW5r2Lxjbb0Z
9pLKPPu0mdLmZhav4/TCRZW3VXhnyeseHv2PzZtsWkHJN5bm9XaX2VbXsXgf
bmoodLkp8mLpmXkX9rF5Eyft9RRmpri9LS6uOXksnqrfZ51e2zk8pevXvt7I
Y/PsftCM/vv2nbvDwY2WsI/FO+j9W+Jv5l+ubKbXUdEfNk+ynXVCW+k013N7
0kVTdRYvot2Cs7s5lRt0kRKN3WbznPwdKx1mvnF+e/WeGPVm8ZpFo3rZkn85
ibd71tfvZ/M813gpSp6Y4nzYRH1yMJfF2/5k97cZ2TkYs2/+PfIWNo8/t8y0
WCSFbVZ6Z6+FX//MVJ7mfg1F7N/EKa8q/PyNdHvRxmdKmP94UHoAfn4P+j6f
shgVrPRua/UFfL+8IM34b7aqWNkGlnkOvp9Ex4cYbEoN4+Zt6s3C9+dW5jyT
4KpjBVseaMXj+78yWnHml99cbOzZ6ys38X6PkxXU5yzRwo7p6x64hPf7EN5e
4u6vjTW4vK74hPdXWF26qPaNNpabqrthO94/43P6w5i7OliG0HDFIO4nurGX
yZZhYU2zz/lWuJ+rc7vt4vrYmM+8w85zBpjga/fUHn5cGRN8hc/o3xV+Z4Iv
G1be8eslTPDVYGwoVTTEBF+EnzfndhcywVeLqG449xcTfP1drLTi510m+PKn
RdlHjDPBl4u07RtSLhN8NRzZu/MiQQd8SRT5PidcY4KvlboParPJOuDr8l/W
ruFzTPBlYkwsr1qiA74u/3zu23KQCb64pdJ/3xzUAV/EQ3w93hIm+Hr86F0U
q1oHfCkfFLtxsFsbfM3PO33liJ8O+MoNs73IWMwEX+t4Nk4iQx3wdW5X1KsM
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
DyvxEe4H+Wp1uDjphPtBvv4P7DkjZA==
                    "]]]][#/{19.9973051050136, 19.993373334445998`}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     1]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     1]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, DisplayFunction -> Identity, 
              AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Frame -> True, FrameLabel -> {
                FormBox[
                 StyleBox["x", {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm], 
                FormBox[
                 StyleBox["y", {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm]}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Automatic, ImageSize -> 250, 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "TransparentPolygonMesh" -> True}, 
              PlotRange -> {{-10.01385498, 
               9.983450125013599}, {-10.0132156498, 9.980157684645997}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, Ticks -> {Automatic, Automatic}, 
              TicksStyle -> {}}, TicksStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer points", "input" -> "SlopeField__Fewer points"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More points", "input" -> "SlopeField__More points"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Slope field", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Vector field", "input" -> 
           "SlopeField__Vector field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Slope field", "input" -> "SlopeField__Slope field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Direction field", "input" -> 
           "SlopeField__Direction field"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Differential equation series solution about x = 0", 
     "scanner" -> "ODE", "id" -> "DifferentialEquationSeriesSolutionAboutx=0",
      "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", "x"}], "+", 
                    FractionBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["x", "2"]}], "2"], "+", 
                    FractionBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["x", "3"]}], "6"], "+", 
                    FractionBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["x", "4"]}], "24"], "+", 
                    FractionBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["x", "5"]}], "120"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"1"}, "C"], ",", 
                    TemplateBox[{"1"}, "C"], ",", 
                    FractionBox[
                    TemplateBox[{"1"}, "C"], "2"], ",", 
                    FractionBox[
                    TemplateBox[{"1"}, "C"], "6"], ",", 
                    FractionBox[
                    TemplateBox[{"1"}, "C"], "24"], ",", 
                    FractionBox[
                    TemplateBox[{"1"}, "C"], "120"]}], "}"}], ",", "0", ",", 
                    "6", ",", "1"}], "]"}]}, "SeriesData", 
                   DisplayFunction -> (#& ), InterpretationFunction -> (#2& ),
                    SyntaxForm -> Plus], Identity]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"converges everywhere\"",
                     "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Differential equation infinite series expansion", 
     "scanner" -> "ODE", "id" -> "DifferentialEquationSeriesInfiniteSolution",
      "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "0"}], "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["x", "n"]}], 
                    RowBox[{"n", "!"}]], HoldForm]}], 
                  BaseStyle -> {ScriptLevel -> 0}]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"converges everywhere\"",
                     "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of sample individual solution", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolution", "position" -> "800", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
DxkFeBlpHjfUhMN/AYvoN0g=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2870680#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.3], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox[
                    StyleBox["x", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    FormBox[
                    StyleBox["y", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox[
                    StyleBox["x", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    FormBox[
                    StyleBox["y", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm]}, 
                    AxesOrigin -> {0, 1.}, AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}, TicksStyle -> {}}, 
                    TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
AsIPTSWI/R8Gxe9o
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2870712#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.3], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox[
                    StyleBox["y", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    FormBox[
                    StyleBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox[
                    StyleBox["y", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    FormBox[
                    StyleBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm]}, 
                    AxesOrigin -> {0, 1.}, AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}, TicksStyle -> {}}, 
                    TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.3], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{None}}, "Rows" -> {None, None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                AbsoluteThickness[1], {{
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1:eJxN0HlM0wcUB/C23G6QjSxMtBuFeeEQ12WiIDggXCWCoBhlkOnKusEIA7Gl
QNggClYMlkELtVVE5RTkkmNQ0dTUlinINelaQBQ6QRgUZFXL2sG2ZL73e8nL
y+evb77PmZl8kEUhkUgn/93/bmGDbujRZMw+0v9zyyLsCE2yAs6k66mVpTaf
v3FgyQ3StNARnHR/4ytLoSu4m+yULRJ4gm39+03HBAxwieoLWqAgGuzIXw7Y
K0gAj0gKrgUIMsBHa7nZpwT54KAMzq4zQjGYJrw62XijDjymTFH4q1rBv8mV
/Im9UvBC83S8ViIDtz402T2elIP1czwFL60HzL8ZdyTerBfMyBwjc2L7wTHz
ocYG8yFwVOYAc+3uMPijfbwOU9YjcOLFdGY1SwX+Yc1IWt6lBstSEsuDdo+C
3YPXRyR7jYMvVWiStJsnwAcaVGrbTU/BoTM7He64ToLztpW2scKmwFyqwqmT
rQXXr1LGKUW/g4dLasNvDzwDH07vu0U1nwG7RjaF5Pg8B0tnnrm9Wz6L//9F
+Db59RxYIu25IsiaB7sYfL0GbXVgk+X27eLSRbCuyzCSVb8EvqD9MTnl7Atw
rItI9FnSMvj1/M65a+w/wSdOtlw+nqkHv5gd10qvvwTv6ag81Kt5BXbwzhOb
bTBgX0pad3HRCtjrff3D7+2MYA/ruHrOkAnMOZbMZ3etgrtaaQU2R0m+b9xZ
VWa1jUcGx2xZECXfo4CLLuZmu7uYg8fOqxTpwxbg4txYD2qFFbilyYNTQ3Cq
frDr00p0U2BwFKMKvRQX2J9Wgw4pHlUN16OzuBSfwjZ0dyg91VGJThSZu7Jn
0TRrS7cQujX4ydeRqSIFekbWvuKuRJ821fKUBNeM+Pz8sgftGb+DFfUAXao/
Y7IfQHvrvKklarTRUL6n4Q80z6G7cYe9DTg3vm6Vcxzd3DkY/t5XBM8Zq24S
/MkUM2GRiTaryAlIYKHVzd/u//I7tDg9pDqMjT617nKZ31m007wfN7sZfeUd
VrRzC3rRt89fTrDbg/iPrVrRb1U/P1TYjuZOsSlXpejNj/dr7t9DK8345+ga
tOd0u98IwUt5/qSMUXSOXYFANoamy3T2ERPo3sZvOCla9O18eV/HAvppXO6J
GB36pzLpB6RFQv/g/ALGEiFvwx35+DK6a6vxgrkBPaSKaL9OcBhjkyZ8Be0s
CNot/gvdxuWFuf+N3rimqfqV4NM5jRYZq4S880/G5Gvou1t9DiaQ1oEj1R8O
2pHRdVvyDrcRvF6SMhVNQf8DbjSxpQ==
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
HkMOTJmNShYn6EnwP1aXgfk=
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
XbchG5rYBvzV97RJ/B/evWlJ
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
HQT/ARftYYU=
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
VImNnq9P0yXxf6s6VZQ=
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
OlBXICuSTd8XSuK/R7FLgA==
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
CH6RHW0m8T8olmS5
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
7kNUdewwfaERq8fCvwHrG2tA
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
zZvefS50uU0fL7llTOH/AU4YV8k=
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
BSwd+p3vf5TE/wMRy01y
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
O1JlkR3Doe+JIPFfjKVMtg==
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
Oo9Sl+L0Vt0whQwS/wdsIFxx
                   "]]}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  BSplineCurveBox[CompressedData["
1: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
kc39WXq0icT/Ad/QZPA=
                   "]]}}}, PlotLabel -> None, ImageSize -> 240, Axes -> True, 
               PlotRange -> All, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], AxesLabel -> {
                 FormBox[
                  StyleBox["x", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                 FormBox[
                  StyleBox["y", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm]}, PlotLabel -> 
               FormBox[
                 StyleBox[
                  RowBox[{"{", 
                    RowBox[{"y", "(", "0", ")"}], "}"}], {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm], TicksStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1]], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   RowBox[{"y", "(", "0", ")"}]}, "RowDefault"], "\[NoBreak]",
                  "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4346186[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
4346186["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4346186["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4348317$$ = 
                 False, $CellContext`Y1$4348318$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$4348319$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
4348320$$ = 0, CalculateScan`ODEScan`Private`iSQ$4348321$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4348317$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$4348318$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
4348319$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$4348320$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$4348321$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`ODEScan`Private`eqs$, 
                    CalculateScan`ODEScan`Private`sol$, 
                    CalculateScan`ODEScan`Private`addInits$, 
                    CalculateScan`ODEScan`Private`nds$, 
                    CalculateScan`ODEScan`Private`xRanges$, 
                    CalculateScan`ODEScan`Private`xRange$, 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$, 
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$,
                     CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$, CalculateScan`ODEScan`Private`yyPPlotRe$}, 
                    CalculateScan`ODEScan`Private`eqs$ = 
                    Flatten[{{
                    Derivative[
                    1][$CellContext`y][$CellContext`x] == \
$CellContext`y[$CellContext`x]}, {}, CalculateScan`ODEScan`Private`addInits$ = 
                    Thread[{
                    $CellContext`y[0]} == Tan[{$CellContext`Y1$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol$ = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds$ = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    MatchQ[CalculateScan`ODEScan`Private`sol$, 
                    Blank[NDSolve]], CalculateScan`ODEScan`Private`sol$ === 
                    "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds$, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
4346186["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges$ = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds$]; 
                    CalculateScan`ODEScan`Private`xRange$ = {
                    0, 0 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges$, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds$, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`y][$CellContext`x]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotRe$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]],
                     Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]]\
; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotRange -> Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
], Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$]] > 1/3], Null, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$ = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$}], CalculateScan`ODEScan`Private`yPlotReIm$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe$ = ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds$]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`y][$CellContext`x], 
                    Derivative[#2][$CellContext`y][$CellContext`x]}& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange$}]], AxesLabel -> {
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe$, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    Identity[
                    Blank[Slot]], 
                    Re[
                    Blank[Slot]]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 1}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4346186[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
4346186["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]], ControlType -> CheckboxBar,
                     ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1, ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 6}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4346186["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkcaqiS9IsI6NSQNKUr7XSy6JhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LkEpKnhyA5/dMyYEvQ+M/IDY+\
W4bcyDkjGh3foPvExYVjGj4qimjmoKaHkqSZzRStWcs6an5yZSJiDD6E14Md4a72693HQzGMiZag+\
Rqpy1knkmiIOkh0C1j9hjh39zxaXn8VDAWwvcCeATqsfFOJIkNjOCEYT7et15vph5gYprwmMj4ymmy\
8hy1vUBpSXk6gVmOb1xO1nZbYCJT5bh5WHKzTkEu/Dv4QIQ2JuexSduzJdAvjGtG30VZ/XPuBnh+\
2xZeirPVxGF+7xjyRjQ9BbVM58vWdXKMVF1ro59zdVXzZaNBXj5l6v+\
lY6r0chiv2oYBsxNT49XaW4YftoUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQQA7GFVtu92lK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe5ER9mXPypuJZcLTYa8H3ENKci1or+\
L9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKpDieqSjsWBLc25fxL9ssDHwFOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb0XSuJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Derivative[1][y][x] == y[x]", "score" -> "0.5217391304347826", 
        "level" -> "medium"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "5.593", "parsetiming" -> "0.307", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP14001dbdb4c21dg4248h000014i4f11g3a0549ig", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "19", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "Derivative[1][y][x] == y[x]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2025, 4, 3, 19, 12, 1.6992242`7.98282567101013}, "Line" -> 68, 
    "SessionID" -> 17802004585480784715}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "DSolve[{Derivative[1][y][x] == y[x], y[0] == 2}, y[x], x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1206.8000000000002`, {1490.4608399698977`, 1497.3391600301024`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9526855217619057`*^9},ExpressionUUID->"b84912c9-9c59-4351-8e64-\
b166fd19ed16"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integrate of exp(-x^2) from 0 to Inf", "WolframAlphaLong",
 CellChangeTimes->{{3.9526856173556137`*^9, 3.9526856863599687`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"0e8764e0-310c-4425-a533-f24dc79d49a8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate of exp(-x^2) from 0 to Inf", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[E^(-x^2), {x, 0, Infinity}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                 RowBox[{
                   TagBox[
                    TagBox[
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    SuperscriptBox["x", "2"]}], ")"}], Identity], 
                    PrecedenceForm[#, 670.]& ], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                SqrtBox["\[Pi]"], "2"], Identity], "\[TildeTilde]", 
              TagBox["0.8862269254527579`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Input__More digits"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[E^(-x^2), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    SuperscriptBox["x", "2"]}], ")"}], HoldForm], Identity], 
                    PrecedenceForm[#, 670.]& ], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "2"], " ", 
                    SqrtBox["\[Pi]"], " ", 
                    RowBox[{"erf", "(", "x", ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                    FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "erf(x) is the error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Erf.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erf", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erf.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.908", "parsetiming" -> "0.651", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP501191fd37e2598e0ia00002fe207881hfi73b5", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa502191fd37e2598e0ia00001390e3iaaffd0b434222294402565530544", "version" -> 
    "2.6", "inputstring" -> "Integrate of exp(-x^2) from 0 to Inf"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2025, 4, 3, 19, 14, 49.4211333`9.446487555708854}, "Line" -> 
    70, "SessionID" -> 17802004585480784715}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Integrate of exp(-x^2) from 0 to Inf"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1206.8000000000002`, {141.46083996989765`, 148.33916003010233`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9526856894399285`*^9},ExpressionUUID->"efc2409d-f706-43dc-8b5c-\
7c1ffde8716f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", "1"}]}]], "Input",
 CellChangeTimes->{{3.9526857449446244`*^9, 3.95268577130319*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"5f901618-7717-4d4d-8aac-acd42a5f4a33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.952685772787318*^9, 3.9526857814227448`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"328b6d2f-bb85-4f19-a919-7c12b112767f"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{{3.9526857733913803`*^9, 3.9526857817683706`*^9}},
 CellLabel->"Out[74]=",ExpressionUUID->"31d23aa3-6030-4145-938c-615d715158bd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"y", " ", 
   RowBox[{"Exp", "[", "x", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9526857961063805`*^9, 3.952685810343466*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"aac342ea-91a3-4f7d-bf68-fe6b5eb88303"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "^", "2"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9526858199683275`*^9, 3.952685875951293*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"1ee2dbff-45c5-431a-907a-a824611d4a8d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "9", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.952685887719467*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"1da1968f-6088-46ef-8894-1aab1e270eac"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], 
  RowBox[{"Exp", "[", 
   RowBox[{"-", "x"}], "]"}], 
  FractionBox[
   RowBox[{"Sin", "[", 
    RowBox[{"Pi", " ", 
     FractionBox["x", "2"]}], "]"}], 
   RowBox[{"1", "+", 
    FractionBox[
     SuperscriptBox["x", "3"], "3"]}]]}]], "Input",
 CellChangeTimes->{{3.9526859570162964`*^9, 3.952685980127962*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"212dc3c5-3f1b-4f45-840a-e2ae7633c08a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "x"}]], " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"\[Pi]", " ", "x"}], "2"], "]"}]}], 
    RowBox[{"1", "+", 
     FractionBox[
      SuperscriptBox["x", "3"], "3"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9526859926633196`*^9, 3.952686008887541*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"6b178019-df9e-43c1-806c-497dc568b492"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox["3", 
    RowBox[{"4", " ", "\[ExponentialE]"}]], "+", 
   FractionBox[
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}]}], 
    RowBox[{"16", " ", "\[ExponentialE]"}]], "-", 
   FractionBox[
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{"23", "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["\[Pi]", "2"]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"x", "-", "1"}], ")"}], "2"]}], 
    RowBox[{"64", " ", "\[ExponentialE]"}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"x", "-", "1"}], "]"}], "3"],
    SeriesData[$CellContext`x, 1, {}, 0, 3, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 1, {
   Rational[3, 4]/E, Rational[3, 16]/E, Rational[-3, 64] 
    E^(-1) (23 + 2 Pi^2)}, 0, 3, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.9526860098115416`*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"ba6d9695-f736-4a00-882a-e5699aebb48b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "\[Alpha]"}], " ", "x"}], "]"}], 
     FractionBox[
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", " ", 
        FractionBox["x", "2"]}], "]"}], 
      RowBox[{"1", "+", 
       RowBox[{"\[Beta]", 
        FractionBox[
         SuperscriptBox["x", "3"], "3"]}]}]]}], "//", 
    RowBox[{
     RowBox[{"Series", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "1"}], "}"}]}], "]"}], "&"}]}], ")"}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "->", "1"}], ",", " ", 
     RowBox[{"\[Beta]", "->", "2"}]}], "}"}], "\:0441"}]}]], "Input",
 CellChangeTimes->{{3.9526860386788034`*^9, 3.952686067696239*^9}, {
   3.9526861143914413`*^9, 3.9526861789762735`*^9}, {3.9526862231677856`*^9, 
   3.952686230375527*^9}, 
   3.9526868648893013`*^9},ExpressionUUID->"07e76887-c2de-433f-8ea6-\
00cdc66dc2e9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox["3", 
    RowBox[{"5", " ", "\[ExponentialE]"}]], "-", 
   FractionBox[
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}]}], 
    RowBox[{"25", " ", "\[ExponentialE]"}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"x", "-", "1"}], "]"}], "2"],
    SeriesData[$CellContext`x, 1, {}, 0, 2, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 1, {Rational[3, 5]/E, Rational[-3, 25]/E}, 0, 2, 
   1],
  Editable->False]], "Output",
 CellChangeTimes->{{3.95268604512597*^9, 3.95268606909947*^9}, {
   3.952686126759256*^9, 3.9526861303997636`*^9}, 3.9526861808269844`*^9, 
   3.9526862307242875`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"ba3faed3-deb9-48fd-af19-320b33980673"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"\[Alpha]", "->", "1"}], ",", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[Alpha]"}], " ", "x"}], "]"}], 
      FractionBox[
       RowBox[{"Sin", "[", 
        RowBox[{"Pi", " ", 
         FractionBox["x", "2"]}], "]"}], 
       RowBox[{"1", "+", 
        RowBox[{"\[Beta]", 
         FractionBox[
          SuperscriptBox["x", "3"], "3"]}]}]]}], "//", 
     RowBox[{
      RowBox[{"Series", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", "1"}], "}"}]}], "]"}], "&"}]}], ")"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9526861932424355`*^9, 3.9526862080479126`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"cd89c4d3-54e5-48c3-b7f9-8846d3a9334d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{"3", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "\[Alpha]"}]]}], 
    RowBox[{"3", "+", "\[Beta]"}]], "-", 
   FractionBox[
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "\[Alpha]"}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "6"}], "+", 
         RowBox[{"3", " ", "\[Alpha]"}], "+", "\[Beta]", "+", 
         RowBox[{"\[Alpha]", " ", "\[Beta]"}]}], ")"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"3", "+", "\[Beta]"}], ")"}], "2"]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"x", "-", "1"}], "]"}], "2"],
    SeriesData[$CellContext`x, 1, {}, 0, 2, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 1, {
   3 E^(-$CellContext`\[Alpha])/(3 + $CellContext`\[Beta]), (-3) 
    E^(-$CellContext`\[Alpha]) (3 + $CellContext`\[Beta])^(-2) (-6 + 
     3 $CellContext`\[Alpha] + $CellContext`\[Beta] + $CellContext`\[Alpha] \
$CellContext`\[Beta])}, 0, 2, 1],
  Editable->False]], "Output",
 CellChangeTimes->{3.9526862091931314`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"af393013-6c07-488e-9207-2c4a8b671c54"]
}, Open  ]]
},
WindowSize->{1280, 742.5},
WindowMargins->{{-4, Automatic}, {Automatic, -4}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.3 Inherited,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0ecf7008-399d-4e96-b7c7-50a491220a59"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 156, 3, 36, "Input",ExpressionUUID->"c31dca86-097d-4c9c-bb81-dfbd71a62bc8"],
Cell[717, 25, 257, 4, 45, "Text",ExpressionUUID->"2e14ffb6-7c79-4a23-af57-797916c1a29d"],
Cell[977, 31, 200, 3, 36, "Input",ExpressionUUID->"2b5172cb-2540-4290-b768-69f0a8cf49fe"],
Cell[CellGroupData[{
Cell[1202, 38, 198, 3, 36, "Input",ExpressionUUID->"8415ba35-acd3-4b9c-b935-9a35fac9d4d1"],
Cell[1403, 43, 147, 2, 41, "Output",ExpressionUUID->"3ed5d418-444a-40a0-af53-92c7d30891be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1587, 50, 263, 5, 36, "Input",ExpressionUUID->"c49c6288-ac26-469d-9441-cdd1c398dc21"],
Cell[1853, 57, 224, 4, 41, "Output",ExpressionUUID->"b0dc8806-ce19-4958-8428-3e712408fd29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2114, 66, 193, 3, 36, "Input",ExpressionUUID->"647595b4-b55c-469c-b6dd-3a265f70f01a"],
Cell[2310, 71, 170, 3, 41, "Output",ExpressionUUID->"6ad38b77-e1b4-4278-9f54-5acdd0ab7e5c"]
}, Open  ]],
Cell[2495, 77, 154, 3, 36, "Input",ExpressionUUID->"052c2331-a119-46ce-b786-a1162e26beb4"],
Cell[CellGroupData[{
Cell[2674, 84, 329, 8, 82, "Input",ExpressionUUID->"dbcece2a-cf09-40ae-8e5d-478a528851fc"],
Cell[3006, 94, 248, 4, 41, "Output",ExpressionUUID->"975a6ec0-d2e2-4e42-ad4d-29318c84d6d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3291, 103, 352, 9, 79, "Input",ExpressionUUID->"c3c8554b-0637-4001-b20b-852d5ae7a905"],
Cell[3646, 114, 327, 7, 41, "Output",ExpressionUUID->"544f0b96-6105-4c00-8a42-7709e88e5a5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4010, 126, 361, 10, 56, "Input",ExpressionUUID->"8ac63aad-283c-4fca-93df-85fb6c47c3e9"],
Cell[4374, 138, 519, 15, 41, "Output",ExpressionUUID->"8756f024-a842-4641-b41a-f7b03a5f888c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4930, 158, 424, 11, 79, "Input",ExpressionUUID->"a08e8b35-bda2-49f1-8830-40d5ace86f1c"],
Cell[5357, 171, 1443, 42, 63, "Output",ExpressionUUID->"472fbcb1-4b24-4437-9024-02e0247a238b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6837, 218, 422, 11, 79, "Input",ExpressionUUID->"bcbfc7e5-11be-461a-b160-c08280fd7001"],
Cell[7262, 231, 1387, 41, 63, "Output",ExpressionUUID->"66400c8e-703f-4c97-9c0b-57ce047254bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8686, 277, 356, 8, 56, "Input",ExpressionUUID->"c85297c2-9d7e-424b-81dd-2ec33eb76c7d"],
Cell[9045, 287, 569, 17, 63, "Output",ExpressionUUID->"78df1b9c-2ab8-4930-bbcf-198164e4f598"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9651, 309, 257, 5, 59, "Input",ExpressionUUID->"391b65d0-882a-4dee-8b77-17cf0567ef89"],
Cell[9911, 316, 195, 4, 63, "Output",ExpressionUUID->"55a4e052-ef82-4511-ad14-60967829673d"]
}, Open  ]],
Cell[10121, 323, 412, 11, 59, "Input",ExpressionUUID->"95ed26da-bf76-41d9-9796-f848f4f34b67"],
Cell[CellGroupData[{
Cell[10558, 338, 213, 4, 59, "Input",ExpressionUUID->"683f76a7-f536-4bb0-ae64-77b1d9b54409"],
Cell[10774, 344, 169, 2, 41, "Output",ExpressionUUID->"d515c87f-426f-4527-a55e-083401f77221"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10980, 351, 415, 11, 59, "Input",ExpressionUUID->"0f5f1e53-9e02-4035-ae6b-9a80ef9408da"],
Cell[11398, 364, 169, 2, 41, "Output",ExpressionUUID->"1a9f4f9a-0def-4022-ac6b-158829564d12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11604, 371, 396, 9, 77, "Input",ExpressionUUID->"ced5d854-93ba-4c94-8269-f4a00dc6eebb"],
Cell[12003, 382, 169, 2, 41, "Output",ExpressionUUID->"82899d0f-427b-44c4-aec4-0920a3e4d405"]
}, Open  ]],
Cell[12187, 387, 314, 8, 77, "Input",ExpressionUUID->"3325215b-b8c4-4c6a-84ef-6e5985237b71"],
Cell[CellGroupData[{
Cell[12526, 399, 247, 5, 80, "Input",ExpressionUUID->"8e11d354-f0c3-411a-b64a-20fbe8d76735"],
Cell[12776, 406, 169, 2, 41, "Output",ExpressionUUID->"e3043cd9-c94a-4022-857b-4741a597ef6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12982, 413, 245, 5, 61, "Input",ExpressionUUID->"9b9c9ac7-d93b-401e-8ec2-3d9c9bd2652d"],
Cell[13230, 420, 210, 4, 45, "Output",ExpressionUUID->"d86c249a-c407-4d45-9b38-4d7ccc0973da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13477, 429, 334, 8, 68, "Input",ExpressionUUID->"918eba12-4f6e-4d8f-aa2e-3f18d80ba707"],
Cell[13814, 439, 149, 2, 41, "Output",ExpressionUUID->"f7cca73e-5c81-4801-8672-e9b2e6efc786"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14000, 446, 487, 16, 68, "Input",ExpressionUUID->"9dfebced-8975-47cf-97f1-24505b9ca324"],
Cell[14490, 464, 201, 4, 41, "Output",ExpressionUUID->"aaca92d6-55dd-4cad-a7d8-078107d15868"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14728, 473, 255, 7, 56, "Input",ExpressionUUID->"17fcf3e8-1193-4cbd-8bbf-dfaea97d61fa"],
Cell[14986, 482, 264, 6, 41, "Output",ExpressionUUID->"3aaff1f7-47fc-460b-b635-e2eae95297d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15287, 493, 278, 6, 56, "Input",ExpressionUUID->"1df5b869-58af-48b4-9a50-16b3e5ea8622"],
Cell[15568, 501, 207, 5, 41, "Output",ExpressionUUID->"2052198b-975e-423d-82de-4c2a46cf2bd3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15812, 511, 219, 5, 61, "Input",ExpressionUUID->"04832359-e0c0-4316-9dd6-50712208051f"],
Cell[16034, 518, 180, 3, 41, "Output",ExpressionUUID->"68529439-34d2-40b2-b50d-033a7e1c3b8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16251, 526, 220, 3, 56, "Input",ExpressionUUID->"d7bbf328-65cc-493d-a089-1f9f2c82ff73"],
Cell[16474, 531, 154, 2, 41, "Output",ExpressionUUID->"88912fbd-36fc-4372-950f-9a0d1aa6e8fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16665, 538, 517, 15, 56, "Input",ExpressionUUID->"d1bf295d-5abe-4350-859a-cf417e057771"],
Cell[17185, 555, 348, 8, 41, "Output",ExpressionUUID->"3f79e66a-8055-4de9-bd2a-ae8c2458d92b"]
}, Open  ]],
Cell[17548, 566, 446, 13, 56, "Input",ExpressionUUID->"57cd77f9-c9a1-4047-aab2-588b3f7e1c4e"],
Cell[CellGroupData[{
Cell[18019, 583, 941, 27, 76, "Input",ExpressionUUID->"d8e68be2-2843-4c9c-bd78-020e563efd2c"],
Cell[18963, 612, 663, 19, 64, "Output",ExpressionUUID->"e6c9734c-f2b2-48b3-b4bc-706e6e798985"]
}, Open  ]],
Cell[19641, 634, 233, 4, 56, "Input",ExpressionUUID->"d84393fb-9896-4e28-9e40-f4f90858433c"],
Cell[CellGroupData[{
Cell[19899, 642, 60168, 1241, 2348, "WolframAlphaShortInput",ExpressionUUID->"77ea0f9a-7848-4e5c-9859-0f9664876da9"],
Cell[80070, 1885, 328, 7, 49, "Output",ExpressionUUID->"38a74853-cd0d-455d-b418-d3d5bd91c97b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80435, 1897, 1098, 30, 51, "WolframAlphaLong",ExpressionUUID->"4da23b98-90bc-4812-a2d0-8d1fa742e466"],
Cell[81536, 1929, 3300, 66, 133, "Print",ExpressionUUID->"bc3ffc75-2e50-433c-96d8-15e8d4a8609e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84873, 2000, 634, 16, 51, "WolframAlphaLong",ExpressionUUID->"8802f401-3a75-4d58-8dd5-5b0e8e5fa799"],
Cell[85510, 2018, 194412, 3791, 3000, "Print",ExpressionUUID->"b84912c9-9c59-4351-8e64-b166fd19ed16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279959, 5814, 213, 2, 51, "WolframAlphaLong",ExpressionUUID->"0e8764e0-310c-4425-a533-f24dc79d49a8"],
Cell[280175, 5818, 9620, 199, 302, "Print",ExpressionUUID->"efc2409d-f706-43dc-8b5c-7c1ffde8716f"]
}, Open  ]],
Cell[289810, 6020, 273, 6, 36, "Input",ExpressionUUID->"5f901618-7717-4d4d-8aac-acd42a5f4a33"],
Cell[CellGroupData[{
Cell[290108, 6030, 201, 3, 36, "Input",ExpressionUUID->"328b6d2f-bb85-4f19-a919-7c12b112767f"],
Cell[290312, 6035, 177, 2, 41, "Output",ExpressionUUID->"31d23aa3-6030-4145-938c-615d715158bd"]
}, Open  ]],
Cell[290504, 6040, 305, 7, 56, "Input",ExpressionUUID->"aac342ea-91a3-4f7d-bf68-fe6b5eb88303"],
Cell[CellGroupData[{
Cell[290834, 6051, 306, 7, 36, "Input",ExpressionUUID->"1ee2dbff-45c5-431a-907a-a824611d4a8d"],
Cell[291143, 6060, 215, 4, 41, "Output",ExpressionUUID->"1da1968f-6088-46ef-8894-1aab1e270eac"]
}, Open  ]],
Cell[291373, 6067, 445, 13, 102, "Input",ExpressionUUID->"212dc3c5-3f1b-4f45-840a-e2ae7633c08a"],
Cell[CellGroupData[{
Cell[291843, 6084, 602, 17, 102, "Input",ExpressionUUID->"6b178019-df9e-43c1-806c-497dc568b492"],
Cell[292448, 6103, 1035, 31, 65, "Output",ExpressionUUID->"ba6d9695-f736-4a00-882a-e5699aebb48b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293520, 6139, 1021, 31, 106, "Input",ExpressionUUID->"07e76887-c2de-433f-8ea6-00cdc66dc2e9"],
Cell[294544, 6172, 811, 22, 59, "Output",ExpressionUUID->"ba3faed3-deb9-48fd-af19-320b33980673"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295392, 6199, 856, 26, 106, "Input",ExpressionUUID->"cd89c4d3-54e5-48c3-b7f9-8846d3a9334d"],
Cell[296251, 6227, 1340, 37, 64, "Output",ExpressionUUID->"af393013-6c07-488e-9207-2c4a8b671c54"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

